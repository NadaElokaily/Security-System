
SmartDUDES.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000224a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  0000224a  000022de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000a8  008000a8  00002326  2**0
                  ALLOC
  3 .stab         00001ae8  00000000  00000000  00002328  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a21  00000000  00000000  00003e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004831  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004971  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000672a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007615  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000083c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008524  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000087b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008f7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e4       	ldi	r30, 0x4A	; 74
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3a       	cpi	r26, 0xAA	; 170
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c9 0b 	call	0x1792	; 0x1792 <main>
      8a:	0c 94 23 11 	jmp	0x2246	; 0x2246 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
      92:	00 c0       	rjmp	.+0      	; 0x94 <Loop>

00000094 <Loop>:
      94:	ff cf       	rjmp	.-2      	; 0x94 <Loop>

00000096 <__fixunssfsi>:
      96:	ef 92       	push	r14
      98:	ff 92       	push	r15
      9a:	0f 93       	push	r16
      9c:	1f 93       	push	r17
      9e:	7b 01       	movw	r14, r22
      a0:	8c 01       	movw	r16, r24
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 4b 03 	call	0x696	; 0x696 <__gesf2>
      ae:	88 23       	and	r24, r24
      b0:	8c f0       	brlt	.+34     	; 0xd4 <__fixunssfsi+0x3e>
      b2:	c8 01       	movw	r24, r16
      b4:	b7 01       	movw	r22, r14
      b6:	20 e0       	ldi	r18, 0x00	; 0
      b8:	30 e0       	ldi	r19, 0x00	; 0
      ba:	40 e0       	ldi	r20, 0x00	; 0
      bc:	5f e4       	ldi	r21, 0x4F	; 79
      be:	0e 94 c3 01 	call	0x386	; 0x386 <__subsf3>
      c2:	0e 94 ab 03 	call	0x756	; 0x756 <__fixsfsi>
      c6:	9b 01       	movw	r18, r22
      c8:	ac 01       	movw	r20, r24
      ca:	20 50       	subi	r18, 0x00	; 0
      cc:	30 40       	sbci	r19, 0x00	; 0
      ce:	40 40       	sbci	r20, 0x00	; 0
      d0:	50 48       	sbci	r21, 0x80	; 128
      d2:	06 c0       	rjmp	.+12     	; 0xe0 <__fixunssfsi+0x4a>
      d4:	c8 01       	movw	r24, r16
      d6:	b7 01       	movw	r22, r14
      d8:	0e 94 ab 03 	call	0x756	; 0x756 <__fixsfsi>
      dc:	9b 01       	movw	r18, r22
      de:	ac 01       	movw	r20, r24
      e0:	b9 01       	movw	r22, r18
      e2:	ca 01       	movw	r24, r20
      e4:	1f 91       	pop	r17
      e6:	0f 91       	pop	r16
      e8:	ff 90       	pop	r15
      ea:	ef 90       	pop	r14
      ec:	08 95       	ret

000000ee <_fpadd_parts>:
      ee:	a0 e0       	ldi	r26, 0x00	; 0
      f0:	b0 e0       	ldi	r27, 0x00	; 0
      f2:	ed e7       	ldi	r30, 0x7D	; 125
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__prologue_saves__>
      fa:	dc 01       	movw	r26, r24
      fc:	2b 01       	movw	r4, r22
      fe:	fa 01       	movw	r30, r20
     100:	9c 91       	ld	r25, X
     102:	92 30       	cpi	r25, 0x02	; 2
     104:	08 f4       	brcc	.+2      	; 0x108 <_fpadd_parts+0x1a>
     106:	39 c1       	rjmp	.+626    	; 0x37a <_fpadd_parts+0x28c>
     108:	eb 01       	movw	r28, r22
     10a:	88 81       	ld	r24, Y
     10c:	82 30       	cpi	r24, 0x02	; 2
     10e:	08 f4       	brcc	.+2      	; 0x112 <_fpadd_parts+0x24>
     110:	33 c1       	rjmp	.+614    	; 0x378 <_fpadd_parts+0x28a>
     112:	94 30       	cpi	r25, 0x04	; 4
     114:	69 f4       	brne	.+26     	; 0x130 <_fpadd_parts+0x42>
     116:	84 30       	cpi	r24, 0x04	; 4
     118:	09 f0       	breq	.+2      	; 0x11c <_fpadd_parts+0x2e>
     11a:	2f c1       	rjmp	.+606    	; 0x37a <_fpadd_parts+0x28c>
     11c:	11 96       	adiw	r26, 0x01	; 1
     11e:	9c 91       	ld	r25, X
     120:	11 97       	sbiw	r26, 0x01	; 1
     122:	89 81       	ldd	r24, Y+1	; 0x01
     124:	98 17       	cp	r25, r24
     126:	09 f4       	brne	.+2      	; 0x12a <_fpadd_parts+0x3c>
     128:	28 c1       	rjmp	.+592    	; 0x37a <_fpadd_parts+0x28c>
     12a:	ac e9       	ldi	r26, 0x9C	; 156
     12c:	b0 e0       	ldi	r27, 0x00	; 0
     12e:	25 c1       	rjmp	.+586    	; 0x37a <_fpadd_parts+0x28c>
     130:	84 30       	cpi	r24, 0x04	; 4
     132:	09 f4       	brne	.+2      	; 0x136 <_fpadd_parts+0x48>
     134:	21 c1       	rjmp	.+578    	; 0x378 <_fpadd_parts+0x28a>
     136:	82 30       	cpi	r24, 0x02	; 2
     138:	a9 f4       	brne	.+42     	; 0x164 <_fpadd_parts+0x76>
     13a:	92 30       	cpi	r25, 0x02	; 2
     13c:	09 f0       	breq	.+2      	; 0x140 <_fpadd_parts+0x52>
     13e:	1d c1       	rjmp	.+570    	; 0x37a <_fpadd_parts+0x28c>
     140:	9a 01       	movw	r18, r20
     142:	ad 01       	movw	r20, r26
     144:	88 e0       	ldi	r24, 0x08	; 8
     146:	ea 01       	movw	r28, r20
     148:	09 90       	ld	r0, Y+
     14a:	ae 01       	movw	r20, r28
     14c:	e9 01       	movw	r28, r18
     14e:	09 92       	st	Y+, r0
     150:	9e 01       	movw	r18, r28
     152:	81 50       	subi	r24, 0x01	; 1
     154:	c1 f7       	brne	.-16     	; 0x146 <_fpadd_parts+0x58>
     156:	e2 01       	movw	r28, r4
     158:	89 81       	ldd	r24, Y+1	; 0x01
     15a:	11 96       	adiw	r26, 0x01	; 1
     15c:	9c 91       	ld	r25, X
     15e:	89 23       	and	r24, r25
     160:	81 83       	std	Z+1, r24	; 0x01
     162:	08 c1       	rjmp	.+528    	; 0x374 <_fpadd_parts+0x286>
     164:	92 30       	cpi	r25, 0x02	; 2
     166:	09 f4       	brne	.+2      	; 0x16a <_fpadd_parts+0x7c>
     168:	07 c1       	rjmp	.+526    	; 0x378 <_fpadd_parts+0x28a>
     16a:	12 96       	adiw	r26, 0x02	; 2
     16c:	2d 90       	ld	r2, X+
     16e:	3c 90       	ld	r3, X
     170:	13 97       	sbiw	r26, 0x03	; 3
     172:	eb 01       	movw	r28, r22
     174:	8a 81       	ldd	r24, Y+2	; 0x02
     176:	9b 81       	ldd	r25, Y+3	; 0x03
     178:	14 96       	adiw	r26, 0x04	; 4
     17a:	ad 90       	ld	r10, X+
     17c:	bd 90       	ld	r11, X+
     17e:	cd 90       	ld	r12, X+
     180:	dc 90       	ld	r13, X
     182:	17 97       	sbiw	r26, 0x07	; 7
     184:	ec 80       	ldd	r14, Y+4	; 0x04
     186:	fd 80       	ldd	r15, Y+5	; 0x05
     188:	0e 81       	ldd	r16, Y+6	; 0x06
     18a:	1f 81       	ldd	r17, Y+7	; 0x07
     18c:	91 01       	movw	r18, r2
     18e:	28 1b       	sub	r18, r24
     190:	39 0b       	sbc	r19, r25
     192:	b9 01       	movw	r22, r18
     194:	37 ff       	sbrs	r19, 7
     196:	04 c0       	rjmp	.+8      	; 0x1a0 <_fpadd_parts+0xb2>
     198:	66 27       	eor	r22, r22
     19a:	77 27       	eor	r23, r23
     19c:	62 1b       	sub	r22, r18
     19e:	73 0b       	sbc	r23, r19
     1a0:	60 32       	cpi	r22, 0x20	; 32
     1a2:	71 05       	cpc	r23, r1
     1a4:	0c f0       	brlt	.+2      	; 0x1a8 <_fpadd_parts+0xba>
     1a6:	61 c0       	rjmp	.+194    	; 0x26a <_fpadd_parts+0x17c>
     1a8:	12 16       	cp	r1, r18
     1aa:	13 06       	cpc	r1, r19
     1ac:	6c f5       	brge	.+90     	; 0x208 <_fpadd_parts+0x11a>
     1ae:	37 01       	movw	r6, r14
     1b0:	48 01       	movw	r8, r16
     1b2:	06 2e       	mov	r0, r22
     1b4:	04 c0       	rjmp	.+8      	; 0x1be <_fpadd_parts+0xd0>
     1b6:	96 94       	lsr	r9
     1b8:	87 94       	ror	r8
     1ba:	77 94       	ror	r7
     1bc:	67 94       	ror	r6
     1be:	0a 94       	dec	r0
     1c0:	d2 f7       	brpl	.-12     	; 0x1b6 <_fpadd_parts+0xc8>
     1c2:	21 e0       	ldi	r18, 0x01	; 1
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	40 e0       	ldi	r20, 0x00	; 0
     1c8:	50 e0       	ldi	r21, 0x00	; 0
     1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <_fpadd_parts+0xe6>
     1cc:	22 0f       	add	r18, r18
     1ce:	33 1f       	adc	r19, r19
     1d0:	44 1f       	adc	r20, r20
     1d2:	55 1f       	adc	r21, r21
     1d4:	6a 95       	dec	r22
     1d6:	d2 f7       	brpl	.-12     	; 0x1cc <_fpadd_parts+0xde>
     1d8:	21 50       	subi	r18, 0x01	; 1
     1da:	30 40       	sbci	r19, 0x00	; 0
     1dc:	40 40       	sbci	r20, 0x00	; 0
     1de:	50 40       	sbci	r21, 0x00	; 0
     1e0:	2e 21       	and	r18, r14
     1e2:	3f 21       	and	r19, r15
     1e4:	40 23       	and	r20, r16
     1e6:	51 23       	and	r21, r17
     1e8:	21 15       	cp	r18, r1
     1ea:	31 05       	cpc	r19, r1
     1ec:	41 05       	cpc	r20, r1
     1ee:	51 05       	cpc	r21, r1
     1f0:	21 f0       	breq	.+8      	; 0x1fa <_fpadd_parts+0x10c>
     1f2:	21 e0       	ldi	r18, 0x01	; 1
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	40 e0       	ldi	r20, 0x00	; 0
     1f8:	50 e0       	ldi	r21, 0x00	; 0
     1fa:	79 01       	movw	r14, r18
     1fc:	8a 01       	movw	r16, r20
     1fe:	e6 28       	or	r14, r6
     200:	f7 28       	or	r15, r7
     202:	08 29       	or	r16, r8
     204:	19 29       	or	r17, r9
     206:	3c c0       	rjmp	.+120    	; 0x280 <_fpadd_parts+0x192>
     208:	23 2b       	or	r18, r19
     20a:	d1 f1       	breq	.+116    	; 0x280 <_fpadd_parts+0x192>
     20c:	26 0e       	add	r2, r22
     20e:	37 1e       	adc	r3, r23
     210:	35 01       	movw	r6, r10
     212:	46 01       	movw	r8, r12
     214:	06 2e       	mov	r0, r22
     216:	04 c0       	rjmp	.+8      	; 0x220 <_fpadd_parts+0x132>
     218:	96 94       	lsr	r9
     21a:	87 94       	ror	r8
     21c:	77 94       	ror	r7
     21e:	67 94       	ror	r6
     220:	0a 94       	dec	r0
     222:	d2 f7       	brpl	.-12     	; 0x218 <_fpadd_parts+0x12a>
     224:	21 e0       	ldi	r18, 0x01	; 1
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	40 e0       	ldi	r20, 0x00	; 0
     22a:	50 e0       	ldi	r21, 0x00	; 0
     22c:	04 c0       	rjmp	.+8      	; 0x236 <_fpadd_parts+0x148>
     22e:	22 0f       	add	r18, r18
     230:	33 1f       	adc	r19, r19
     232:	44 1f       	adc	r20, r20
     234:	55 1f       	adc	r21, r21
     236:	6a 95       	dec	r22
     238:	d2 f7       	brpl	.-12     	; 0x22e <_fpadd_parts+0x140>
     23a:	21 50       	subi	r18, 0x01	; 1
     23c:	30 40       	sbci	r19, 0x00	; 0
     23e:	40 40       	sbci	r20, 0x00	; 0
     240:	50 40       	sbci	r21, 0x00	; 0
     242:	2a 21       	and	r18, r10
     244:	3b 21       	and	r19, r11
     246:	4c 21       	and	r20, r12
     248:	5d 21       	and	r21, r13
     24a:	21 15       	cp	r18, r1
     24c:	31 05       	cpc	r19, r1
     24e:	41 05       	cpc	r20, r1
     250:	51 05       	cpc	r21, r1
     252:	21 f0       	breq	.+8      	; 0x25c <_fpadd_parts+0x16e>
     254:	21 e0       	ldi	r18, 0x01	; 1
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	40 e0       	ldi	r20, 0x00	; 0
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	59 01       	movw	r10, r18
     25e:	6a 01       	movw	r12, r20
     260:	a6 28       	or	r10, r6
     262:	b7 28       	or	r11, r7
     264:	c8 28       	or	r12, r8
     266:	d9 28       	or	r13, r9
     268:	0b c0       	rjmp	.+22     	; 0x280 <_fpadd_parts+0x192>
     26a:	82 15       	cp	r24, r2
     26c:	93 05       	cpc	r25, r3
     26e:	2c f0       	brlt	.+10     	; 0x27a <_fpadd_parts+0x18c>
     270:	1c 01       	movw	r2, r24
     272:	aa 24       	eor	r10, r10
     274:	bb 24       	eor	r11, r11
     276:	65 01       	movw	r12, r10
     278:	03 c0       	rjmp	.+6      	; 0x280 <_fpadd_parts+0x192>
     27a:	ee 24       	eor	r14, r14
     27c:	ff 24       	eor	r15, r15
     27e:	87 01       	movw	r16, r14
     280:	11 96       	adiw	r26, 0x01	; 1
     282:	9c 91       	ld	r25, X
     284:	d2 01       	movw	r26, r4
     286:	11 96       	adiw	r26, 0x01	; 1
     288:	8c 91       	ld	r24, X
     28a:	98 17       	cp	r25, r24
     28c:	09 f4       	brne	.+2      	; 0x290 <_fpadd_parts+0x1a2>
     28e:	45 c0       	rjmp	.+138    	; 0x31a <_fpadd_parts+0x22c>
     290:	99 23       	and	r25, r25
     292:	39 f0       	breq	.+14     	; 0x2a2 <_fpadd_parts+0x1b4>
     294:	a8 01       	movw	r20, r16
     296:	97 01       	movw	r18, r14
     298:	2a 19       	sub	r18, r10
     29a:	3b 09       	sbc	r19, r11
     29c:	4c 09       	sbc	r20, r12
     29e:	5d 09       	sbc	r21, r13
     2a0:	06 c0       	rjmp	.+12     	; 0x2ae <_fpadd_parts+0x1c0>
     2a2:	a6 01       	movw	r20, r12
     2a4:	95 01       	movw	r18, r10
     2a6:	2e 19       	sub	r18, r14
     2a8:	3f 09       	sbc	r19, r15
     2aa:	40 0b       	sbc	r20, r16
     2ac:	51 0b       	sbc	r21, r17
     2ae:	57 fd       	sbrc	r21, 7
     2b0:	08 c0       	rjmp	.+16     	; 0x2c2 <_fpadd_parts+0x1d4>
     2b2:	11 82       	std	Z+1, r1	; 0x01
     2b4:	33 82       	std	Z+3, r3	; 0x03
     2b6:	22 82       	std	Z+2, r2	; 0x02
     2b8:	24 83       	std	Z+4, r18	; 0x04
     2ba:	35 83       	std	Z+5, r19	; 0x05
     2bc:	46 83       	std	Z+6, r20	; 0x06
     2be:	57 83       	std	Z+7, r21	; 0x07
     2c0:	1d c0       	rjmp	.+58     	; 0x2fc <_fpadd_parts+0x20e>
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	81 83       	std	Z+1, r24	; 0x01
     2c6:	33 82       	std	Z+3, r3	; 0x03
     2c8:	22 82       	std	Z+2, r2	; 0x02
     2ca:	88 27       	eor	r24, r24
     2cc:	99 27       	eor	r25, r25
     2ce:	dc 01       	movw	r26, r24
     2d0:	82 1b       	sub	r24, r18
     2d2:	93 0b       	sbc	r25, r19
     2d4:	a4 0b       	sbc	r26, r20
     2d6:	b5 0b       	sbc	r27, r21
     2d8:	84 83       	std	Z+4, r24	; 0x04
     2da:	95 83       	std	Z+5, r25	; 0x05
     2dc:	a6 83       	std	Z+6, r26	; 0x06
     2de:	b7 83       	std	Z+7, r27	; 0x07
     2e0:	0d c0       	rjmp	.+26     	; 0x2fc <_fpadd_parts+0x20e>
     2e2:	22 0f       	add	r18, r18
     2e4:	33 1f       	adc	r19, r19
     2e6:	44 1f       	adc	r20, r20
     2e8:	55 1f       	adc	r21, r21
     2ea:	24 83       	std	Z+4, r18	; 0x04
     2ec:	35 83       	std	Z+5, r19	; 0x05
     2ee:	46 83       	std	Z+6, r20	; 0x06
     2f0:	57 83       	std	Z+7, r21	; 0x07
     2f2:	82 81       	ldd	r24, Z+2	; 0x02
     2f4:	93 81       	ldd	r25, Z+3	; 0x03
     2f6:	01 97       	sbiw	r24, 0x01	; 1
     2f8:	93 83       	std	Z+3, r25	; 0x03
     2fa:	82 83       	std	Z+2, r24	; 0x02
     2fc:	24 81       	ldd	r18, Z+4	; 0x04
     2fe:	35 81       	ldd	r19, Z+5	; 0x05
     300:	46 81       	ldd	r20, Z+6	; 0x06
     302:	57 81       	ldd	r21, Z+7	; 0x07
     304:	da 01       	movw	r26, r20
     306:	c9 01       	movw	r24, r18
     308:	01 97       	sbiw	r24, 0x01	; 1
     30a:	a1 09       	sbc	r26, r1
     30c:	b1 09       	sbc	r27, r1
     30e:	8f 5f       	subi	r24, 0xFF	; 255
     310:	9f 4f       	sbci	r25, 0xFF	; 255
     312:	af 4f       	sbci	r26, 0xFF	; 255
     314:	bf 43       	sbci	r27, 0x3F	; 63
     316:	28 f3       	brcs	.-54     	; 0x2e2 <_fpadd_parts+0x1f4>
     318:	0b c0       	rjmp	.+22     	; 0x330 <_fpadd_parts+0x242>
     31a:	91 83       	std	Z+1, r25	; 0x01
     31c:	33 82       	std	Z+3, r3	; 0x03
     31e:	22 82       	std	Z+2, r2	; 0x02
     320:	ea 0c       	add	r14, r10
     322:	fb 1c       	adc	r15, r11
     324:	0c 1d       	adc	r16, r12
     326:	1d 1d       	adc	r17, r13
     328:	e4 82       	std	Z+4, r14	; 0x04
     32a:	f5 82       	std	Z+5, r15	; 0x05
     32c:	06 83       	std	Z+6, r16	; 0x06
     32e:	17 83       	std	Z+7, r17	; 0x07
     330:	83 e0       	ldi	r24, 0x03	; 3
     332:	80 83       	st	Z, r24
     334:	24 81       	ldd	r18, Z+4	; 0x04
     336:	35 81       	ldd	r19, Z+5	; 0x05
     338:	46 81       	ldd	r20, Z+6	; 0x06
     33a:	57 81       	ldd	r21, Z+7	; 0x07
     33c:	57 ff       	sbrs	r21, 7
     33e:	1a c0       	rjmp	.+52     	; 0x374 <_fpadd_parts+0x286>
     340:	c9 01       	movw	r24, r18
     342:	aa 27       	eor	r26, r26
     344:	97 fd       	sbrc	r25, 7
     346:	a0 95       	com	r26
     348:	ba 2f       	mov	r27, r26
     34a:	81 70       	andi	r24, 0x01	; 1
     34c:	90 70       	andi	r25, 0x00	; 0
     34e:	a0 70       	andi	r26, 0x00	; 0
     350:	b0 70       	andi	r27, 0x00	; 0
     352:	56 95       	lsr	r21
     354:	47 95       	ror	r20
     356:	37 95       	ror	r19
     358:	27 95       	ror	r18
     35a:	82 2b       	or	r24, r18
     35c:	93 2b       	or	r25, r19
     35e:	a4 2b       	or	r26, r20
     360:	b5 2b       	or	r27, r21
     362:	84 83       	std	Z+4, r24	; 0x04
     364:	95 83       	std	Z+5, r25	; 0x05
     366:	a6 83       	std	Z+6, r26	; 0x06
     368:	b7 83       	std	Z+7, r27	; 0x07
     36a:	82 81       	ldd	r24, Z+2	; 0x02
     36c:	93 81       	ldd	r25, Z+3	; 0x03
     36e:	01 96       	adiw	r24, 0x01	; 1
     370:	93 83       	std	Z+3, r25	; 0x03
     372:	82 83       	std	Z+2, r24	; 0x02
     374:	df 01       	movw	r26, r30
     376:	01 c0       	rjmp	.+2      	; 0x37a <_fpadd_parts+0x28c>
     378:	d2 01       	movw	r26, r4
     37a:	cd 01       	movw	r24, r26
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	e2 e1       	ldi	r30, 0x12	; 18
     382:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__epilogue_restores__>

00000386 <__subsf3>:
     386:	a0 e2       	ldi	r26, 0x20	; 32
     388:	b0 e0       	ldi	r27, 0x00	; 0
     38a:	e9 ec       	ldi	r30, 0xC9	; 201
     38c:	f1 e0       	ldi	r31, 0x01	; 1
     38e:	0c 94 b3 10 	jmp	0x2166	; 0x2166 <__prologue_saves__+0x18>
     392:	69 83       	std	Y+1, r22	; 0x01
     394:	7a 83       	std	Y+2, r23	; 0x02
     396:	8b 83       	std	Y+3, r24	; 0x03
     398:	9c 83       	std	Y+4, r25	; 0x04
     39a:	2d 83       	std	Y+5, r18	; 0x05
     39c:	3e 83       	std	Y+6, r19	; 0x06
     39e:	4f 83       	std	Y+7, r20	; 0x07
     3a0:	58 87       	std	Y+8, r21	; 0x08
     3a2:	e9 e0       	ldi	r30, 0x09	; 9
     3a4:	ee 2e       	mov	r14, r30
     3a6:	f1 2c       	mov	r15, r1
     3a8:	ec 0e       	add	r14, r28
     3aa:	fd 1e       	adc	r15, r29
     3ac:	ce 01       	movw	r24, r28
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	b7 01       	movw	r22, r14
     3b2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     3b6:	8e 01       	movw	r16, r28
     3b8:	0f 5e       	subi	r16, 0xEF	; 239
     3ba:	1f 4f       	sbci	r17, 0xFF	; 255
     3bc:	ce 01       	movw	r24, r28
     3be:	05 96       	adiw	r24, 0x05	; 5
     3c0:	b8 01       	movw	r22, r16
     3c2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     3c6:	8a 89       	ldd	r24, Y+18	; 0x12
     3c8:	91 e0       	ldi	r25, 0x01	; 1
     3ca:	89 27       	eor	r24, r25
     3cc:	8a 8b       	std	Y+18, r24	; 0x12
     3ce:	c7 01       	movw	r24, r14
     3d0:	b8 01       	movw	r22, r16
     3d2:	ae 01       	movw	r20, r28
     3d4:	47 5e       	subi	r20, 0xE7	; 231
     3d6:	5f 4f       	sbci	r21, 0xFF	; 255
     3d8:	0e 94 77 00 	call	0xee	; 0xee <_fpadd_parts>
     3dc:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__pack_f>
     3e0:	a0 96       	adiw	r28, 0x20	; 32
     3e2:	e6 e0       	ldi	r30, 0x06	; 6
     3e4:	0c 94 cf 10 	jmp	0x219e	; 0x219e <__epilogue_restores__+0x18>

000003e8 <__addsf3>:
     3e8:	a0 e2       	ldi	r26, 0x20	; 32
     3ea:	b0 e0       	ldi	r27, 0x00	; 0
     3ec:	ea ef       	ldi	r30, 0xFA	; 250
     3ee:	f1 e0       	ldi	r31, 0x01	; 1
     3f0:	0c 94 b3 10 	jmp	0x2166	; 0x2166 <__prologue_saves__+0x18>
     3f4:	69 83       	std	Y+1, r22	; 0x01
     3f6:	7a 83       	std	Y+2, r23	; 0x02
     3f8:	8b 83       	std	Y+3, r24	; 0x03
     3fa:	9c 83       	std	Y+4, r25	; 0x04
     3fc:	2d 83       	std	Y+5, r18	; 0x05
     3fe:	3e 83       	std	Y+6, r19	; 0x06
     400:	4f 83       	std	Y+7, r20	; 0x07
     402:	58 87       	std	Y+8, r21	; 0x08
     404:	f9 e0       	ldi	r31, 0x09	; 9
     406:	ef 2e       	mov	r14, r31
     408:	f1 2c       	mov	r15, r1
     40a:	ec 0e       	add	r14, r28
     40c:	fd 1e       	adc	r15, r29
     40e:	ce 01       	movw	r24, r28
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	b7 01       	movw	r22, r14
     414:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     418:	8e 01       	movw	r16, r28
     41a:	0f 5e       	subi	r16, 0xEF	; 239
     41c:	1f 4f       	sbci	r17, 0xFF	; 255
     41e:	ce 01       	movw	r24, r28
     420:	05 96       	adiw	r24, 0x05	; 5
     422:	b8 01       	movw	r22, r16
     424:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     428:	c7 01       	movw	r24, r14
     42a:	b8 01       	movw	r22, r16
     42c:	ae 01       	movw	r20, r28
     42e:	47 5e       	subi	r20, 0xE7	; 231
     430:	5f 4f       	sbci	r21, 0xFF	; 255
     432:	0e 94 77 00 	call	0xee	; 0xee <_fpadd_parts>
     436:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__pack_f>
     43a:	a0 96       	adiw	r28, 0x20	; 32
     43c:	e6 e0       	ldi	r30, 0x06	; 6
     43e:	0c 94 cf 10 	jmp	0x219e	; 0x219e <__epilogue_restores__+0x18>

00000442 <__mulsf3>:
     442:	a0 e2       	ldi	r26, 0x20	; 32
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e7 e2       	ldi	r30, 0x27	; 39
     448:	f2 e0       	ldi	r31, 0x02	; 2
     44a:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__prologue_saves__>
     44e:	69 83       	std	Y+1, r22	; 0x01
     450:	7a 83       	std	Y+2, r23	; 0x02
     452:	8b 83       	std	Y+3, r24	; 0x03
     454:	9c 83       	std	Y+4, r25	; 0x04
     456:	2d 83       	std	Y+5, r18	; 0x05
     458:	3e 83       	std	Y+6, r19	; 0x06
     45a:	4f 83       	std	Y+7, r20	; 0x07
     45c:	58 87       	std	Y+8, r21	; 0x08
     45e:	ce 01       	movw	r24, r28
     460:	01 96       	adiw	r24, 0x01	; 1
     462:	be 01       	movw	r22, r28
     464:	67 5f       	subi	r22, 0xF7	; 247
     466:	7f 4f       	sbci	r23, 0xFF	; 255
     468:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     46c:	ce 01       	movw	r24, r28
     46e:	05 96       	adiw	r24, 0x05	; 5
     470:	be 01       	movw	r22, r28
     472:	6f 5e       	subi	r22, 0xEF	; 239
     474:	7f 4f       	sbci	r23, 0xFF	; 255
     476:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     47a:	99 85       	ldd	r25, Y+9	; 0x09
     47c:	92 30       	cpi	r25, 0x02	; 2
     47e:	88 f0       	brcs	.+34     	; 0x4a2 <__mulsf3+0x60>
     480:	89 89       	ldd	r24, Y+17	; 0x11
     482:	82 30       	cpi	r24, 0x02	; 2
     484:	c8 f0       	brcs	.+50     	; 0x4b8 <__mulsf3+0x76>
     486:	94 30       	cpi	r25, 0x04	; 4
     488:	19 f4       	brne	.+6      	; 0x490 <__mulsf3+0x4e>
     48a:	82 30       	cpi	r24, 0x02	; 2
     48c:	51 f4       	brne	.+20     	; 0x4a2 <__mulsf3+0x60>
     48e:	04 c0       	rjmp	.+8      	; 0x498 <__mulsf3+0x56>
     490:	84 30       	cpi	r24, 0x04	; 4
     492:	29 f4       	brne	.+10     	; 0x49e <__mulsf3+0x5c>
     494:	92 30       	cpi	r25, 0x02	; 2
     496:	81 f4       	brne	.+32     	; 0x4b8 <__mulsf3+0x76>
     498:	8c e9       	ldi	r24, 0x9C	; 156
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	c6 c0       	rjmp	.+396    	; 0x62a <__mulsf3+0x1e8>
     49e:	92 30       	cpi	r25, 0x02	; 2
     4a0:	49 f4       	brne	.+18     	; 0x4b4 <__mulsf3+0x72>
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a6:	8a 89       	ldd	r24, Y+18	; 0x12
     4a8:	98 13       	cpse	r25, r24
     4aa:	21 e0       	ldi	r18, 0x01	; 1
     4ac:	2a 87       	std	Y+10, r18	; 0x0a
     4ae:	ce 01       	movw	r24, r28
     4b0:	09 96       	adiw	r24, 0x09	; 9
     4b2:	bb c0       	rjmp	.+374    	; 0x62a <__mulsf3+0x1e8>
     4b4:	82 30       	cpi	r24, 0x02	; 2
     4b6:	49 f4       	brne	.+18     	; 0x4ca <__mulsf3+0x88>
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	98 13       	cpse	r25, r24
     4c0:	21 e0       	ldi	r18, 0x01	; 1
     4c2:	2a 8b       	std	Y+18, r18	; 0x12
     4c4:	ce 01       	movw	r24, r28
     4c6:	41 96       	adiw	r24, 0x11	; 17
     4c8:	b0 c0       	rjmp	.+352    	; 0x62a <__mulsf3+0x1e8>
     4ca:	2d 84       	ldd	r2, Y+13	; 0x0d
     4cc:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ce:	4f 84       	ldd	r4, Y+15	; 0x0f
     4d0:	58 88       	ldd	r5, Y+16	; 0x10
     4d2:	6d 88       	ldd	r6, Y+21	; 0x15
     4d4:	7e 88       	ldd	r7, Y+22	; 0x16
     4d6:	8f 88       	ldd	r8, Y+23	; 0x17
     4d8:	98 8c       	ldd	r9, Y+24	; 0x18
     4da:	ee 24       	eor	r14, r14
     4dc:	ff 24       	eor	r15, r15
     4de:	87 01       	movw	r16, r14
     4e0:	aa 24       	eor	r10, r10
     4e2:	bb 24       	eor	r11, r11
     4e4:	65 01       	movw	r12, r10
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	e0 e0       	ldi	r30, 0x00	; 0
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	c1 01       	movw	r24, r2
     4f4:	81 70       	andi	r24, 0x01	; 1
     4f6:	90 70       	andi	r25, 0x00	; 0
     4f8:	89 2b       	or	r24, r25
     4fa:	e9 f0       	breq	.+58     	; 0x536 <__mulsf3+0xf4>
     4fc:	e6 0c       	add	r14, r6
     4fe:	f7 1c       	adc	r15, r7
     500:	08 1d       	adc	r16, r8
     502:	19 1d       	adc	r17, r9
     504:	9a 01       	movw	r18, r20
     506:	ab 01       	movw	r20, r22
     508:	2a 0d       	add	r18, r10
     50a:	3b 1d       	adc	r19, r11
     50c:	4c 1d       	adc	r20, r12
     50e:	5d 1d       	adc	r21, r13
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	a0 e0       	ldi	r26, 0x00	; 0
     516:	b0 e0       	ldi	r27, 0x00	; 0
     518:	e6 14       	cp	r14, r6
     51a:	f7 04       	cpc	r15, r7
     51c:	08 05       	cpc	r16, r8
     51e:	19 05       	cpc	r17, r9
     520:	20 f4       	brcc	.+8      	; 0x52a <__mulsf3+0xe8>
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	a0 e0       	ldi	r26, 0x00	; 0
     528:	b0 e0       	ldi	r27, 0x00	; 0
     52a:	ba 01       	movw	r22, r20
     52c:	a9 01       	movw	r20, r18
     52e:	48 0f       	add	r20, r24
     530:	59 1f       	adc	r21, r25
     532:	6a 1f       	adc	r22, r26
     534:	7b 1f       	adc	r23, r27
     536:	aa 0c       	add	r10, r10
     538:	bb 1c       	adc	r11, r11
     53a:	cc 1c       	adc	r12, r12
     53c:	dd 1c       	adc	r13, r13
     53e:	97 fe       	sbrs	r9, 7
     540:	08 c0       	rjmp	.+16     	; 0x552 <__mulsf3+0x110>
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	a0 e0       	ldi	r26, 0x00	; 0
     548:	b0 e0       	ldi	r27, 0x00	; 0
     54a:	a8 2a       	or	r10, r24
     54c:	b9 2a       	or	r11, r25
     54e:	ca 2a       	or	r12, r26
     550:	db 2a       	or	r13, r27
     552:	31 96       	adiw	r30, 0x01	; 1
     554:	e0 32       	cpi	r30, 0x20	; 32
     556:	f1 05       	cpc	r31, r1
     558:	49 f0       	breq	.+18     	; 0x56c <__mulsf3+0x12a>
     55a:	66 0c       	add	r6, r6
     55c:	77 1c       	adc	r7, r7
     55e:	88 1c       	adc	r8, r8
     560:	99 1c       	adc	r9, r9
     562:	56 94       	lsr	r5
     564:	47 94       	ror	r4
     566:	37 94       	ror	r3
     568:	27 94       	ror	r2
     56a:	c3 cf       	rjmp	.-122    	; 0x4f2 <__mulsf3+0xb0>
     56c:	fa 85       	ldd	r31, Y+10	; 0x0a
     56e:	ea 89       	ldd	r30, Y+18	; 0x12
     570:	2b 89       	ldd	r18, Y+19	; 0x13
     572:	3c 89       	ldd	r19, Y+20	; 0x14
     574:	8b 85       	ldd	r24, Y+11	; 0x0b
     576:	9c 85       	ldd	r25, Y+12	; 0x0c
     578:	28 0f       	add	r18, r24
     57a:	39 1f       	adc	r19, r25
     57c:	2e 5f       	subi	r18, 0xFE	; 254
     57e:	3f 4f       	sbci	r19, 0xFF	; 255
     580:	17 c0       	rjmp	.+46     	; 0x5b0 <__mulsf3+0x16e>
     582:	ca 01       	movw	r24, r20
     584:	81 70       	andi	r24, 0x01	; 1
     586:	90 70       	andi	r25, 0x00	; 0
     588:	89 2b       	or	r24, r25
     58a:	61 f0       	breq	.+24     	; 0x5a4 <__mulsf3+0x162>
     58c:	16 95       	lsr	r17
     58e:	07 95       	ror	r16
     590:	f7 94       	ror	r15
     592:	e7 94       	ror	r14
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	a0 e0       	ldi	r26, 0x00	; 0
     59a:	b0 e8       	ldi	r27, 0x80	; 128
     59c:	e8 2a       	or	r14, r24
     59e:	f9 2a       	or	r15, r25
     5a0:	0a 2b       	or	r16, r26
     5a2:	1b 2b       	or	r17, r27
     5a4:	76 95       	lsr	r23
     5a6:	67 95       	ror	r22
     5a8:	57 95       	ror	r21
     5aa:	47 95       	ror	r20
     5ac:	2f 5f       	subi	r18, 0xFF	; 255
     5ae:	3f 4f       	sbci	r19, 0xFF	; 255
     5b0:	77 fd       	sbrc	r23, 7
     5b2:	e7 cf       	rjmp	.-50     	; 0x582 <__mulsf3+0x140>
     5b4:	0c c0       	rjmp	.+24     	; 0x5ce <__mulsf3+0x18c>
     5b6:	44 0f       	add	r20, r20
     5b8:	55 1f       	adc	r21, r21
     5ba:	66 1f       	adc	r22, r22
     5bc:	77 1f       	adc	r23, r23
     5be:	17 fd       	sbrc	r17, 7
     5c0:	41 60       	ori	r20, 0x01	; 1
     5c2:	ee 0c       	add	r14, r14
     5c4:	ff 1c       	adc	r15, r15
     5c6:	00 1f       	adc	r16, r16
     5c8:	11 1f       	adc	r17, r17
     5ca:	21 50       	subi	r18, 0x01	; 1
     5cc:	30 40       	sbci	r19, 0x00	; 0
     5ce:	40 30       	cpi	r20, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	59 07       	cpc	r21, r25
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	69 07       	cpc	r22, r25
     5d8:	90 e4       	ldi	r25, 0x40	; 64
     5da:	79 07       	cpc	r23, r25
     5dc:	60 f3       	brcs	.-40     	; 0x5b6 <__mulsf3+0x174>
     5de:	2b 8f       	std	Y+27, r18	; 0x1b
     5e0:	3c 8f       	std	Y+28, r19	; 0x1c
     5e2:	db 01       	movw	r26, r22
     5e4:	ca 01       	movw	r24, r20
     5e6:	8f 77       	andi	r24, 0x7F	; 127
     5e8:	90 70       	andi	r25, 0x00	; 0
     5ea:	a0 70       	andi	r26, 0x00	; 0
     5ec:	b0 70       	andi	r27, 0x00	; 0
     5ee:	80 34       	cpi	r24, 0x40	; 64
     5f0:	91 05       	cpc	r25, r1
     5f2:	a1 05       	cpc	r26, r1
     5f4:	b1 05       	cpc	r27, r1
     5f6:	61 f4       	brne	.+24     	; 0x610 <__mulsf3+0x1ce>
     5f8:	47 fd       	sbrc	r20, 7
     5fa:	0a c0       	rjmp	.+20     	; 0x610 <__mulsf3+0x1ce>
     5fc:	e1 14       	cp	r14, r1
     5fe:	f1 04       	cpc	r15, r1
     600:	01 05       	cpc	r16, r1
     602:	11 05       	cpc	r17, r1
     604:	29 f0       	breq	.+10     	; 0x610 <__mulsf3+0x1ce>
     606:	40 5c       	subi	r20, 0xC0	; 192
     608:	5f 4f       	sbci	r21, 0xFF	; 255
     60a:	6f 4f       	sbci	r22, 0xFF	; 255
     60c:	7f 4f       	sbci	r23, 0xFF	; 255
     60e:	40 78       	andi	r20, 0x80	; 128
     610:	1a 8e       	std	Y+26, r1	; 0x1a
     612:	fe 17       	cp	r31, r30
     614:	11 f0       	breq	.+4      	; 0x61a <__mulsf3+0x1d8>
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	8a 8f       	std	Y+26, r24	; 0x1a
     61a:	4d 8f       	std	Y+29, r20	; 0x1d
     61c:	5e 8f       	std	Y+30, r21	; 0x1e
     61e:	6f 8f       	std	Y+31, r22	; 0x1f
     620:	78 a3       	std	Y+32, r23	; 0x20
     622:	83 e0       	ldi	r24, 0x03	; 3
     624:	89 8f       	std	Y+25, r24	; 0x19
     626:	ce 01       	movw	r24, r28
     628:	49 96       	adiw	r24, 0x19	; 25
     62a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__pack_f>
     62e:	a0 96       	adiw	r28, 0x20	; 32
     630:	e2 e1       	ldi	r30, 0x12	; 18
     632:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__epilogue_restores__>

00000636 <__gtsf2>:
     636:	a8 e1       	ldi	r26, 0x18	; 24
     638:	b0 e0       	ldi	r27, 0x00	; 0
     63a:	e1 e2       	ldi	r30, 0x21	; 33
     63c:	f3 e0       	ldi	r31, 0x03	; 3
     63e:	0c 94 b3 10 	jmp	0x2166	; 0x2166 <__prologue_saves__+0x18>
     642:	69 83       	std	Y+1, r22	; 0x01
     644:	7a 83       	std	Y+2, r23	; 0x02
     646:	8b 83       	std	Y+3, r24	; 0x03
     648:	9c 83       	std	Y+4, r25	; 0x04
     64a:	2d 83       	std	Y+5, r18	; 0x05
     64c:	3e 83       	std	Y+6, r19	; 0x06
     64e:	4f 83       	std	Y+7, r20	; 0x07
     650:	58 87       	std	Y+8, r21	; 0x08
     652:	89 e0       	ldi	r24, 0x09	; 9
     654:	e8 2e       	mov	r14, r24
     656:	f1 2c       	mov	r15, r1
     658:	ec 0e       	add	r14, r28
     65a:	fd 1e       	adc	r15, r29
     65c:	ce 01       	movw	r24, r28
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	b7 01       	movw	r22, r14
     662:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     666:	8e 01       	movw	r16, r28
     668:	0f 5e       	subi	r16, 0xEF	; 239
     66a:	1f 4f       	sbci	r17, 0xFF	; 255
     66c:	ce 01       	movw	r24, r28
     66e:	05 96       	adiw	r24, 0x05	; 5
     670:	b8 01       	movw	r22, r16
     672:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     676:	89 85       	ldd	r24, Y+9	; 0x09
     678:	82 30       	cpi	r24, 0x02	; 2
     67a:	40 f0       	brcs	.+16     	; 0x68c <__gtsf2+0x56>
     67c:	89 89       	ldd	r24, Y+17	; 0x11
     67e:	82 30       	cpi	r24, 0x02	; 2
     680:	28 f0       	brcs	.+10     	; 0x68c <__gtsf2+0x56>
     682:	c7 01       	movw	r24, r14
     684:	b8 01       	movw	r22, r16
     686:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fpcmp_parts_f>
     68a:	01 c0       	rjmp	.+2      	; 0x68e <__gtsf2+0x58>
     68c:	8f ef       	ldi	r24, 0xFF	; 255
     68e:	68 96       	adiw	r28, 0x18	; 24
     690:	e6 e0       	ldi	r30, 0x06	; 6
     692:	0c 94 cf 10 	jmp	0x219e	; 0x219e <__epilogue_restores__+0x18>

00000696 <__gesf2>:
     696:	a8 e1       	ldi	r26, 0x18	; 24
     698:	b0 e0       	ldi	r27, 0x00	; 0
     69a:	e1 e5       	ldi	r30, 0x51	; 81
     69c:	f3 e0       	ldi	r31, 0x03	; 3
     69e:	0c 94 b3 10 	jmp	0x2166	; 0x2166 <__prologue_saves__+0x18>
     6a2:	69 83       	std	Y+1, r22	; 0x01
     6a4:	7a 83       	std	Y+2, r23	; 0x02
     6a6:	8b 83       	std	Y+3, r24	; 0x03
     6a8:	9c 83       	std	Y+4, r25	; 0x04
     6aa:	2d 83       	std	Y+5, r18	; 0x05
     6ac:	3e 83       	std	Y+6, r19	; 0x06
     6ae:	4f 83       	std	Y+7, r20	; 0x07
     6b0:	58 87       	std	Y+8, r21	; 0x08
     6b2:	89 e0       	ldi	r24, 0x09	; 9
     6b4:	e8 2e       	mov	r14, r24
     6b6:	f1 2c       	mov	r15, r1
     6b8:	ec 0e       	add	r14, r28
     6ba:	fd 1e       	adc	r15, r29
     6bc:	ce 01       	movw	r24, r28
     6be:	01 96       	adiw	r24, 0x01	; 1
     6c0:	b7 01       	movw	r22, r14
     6c2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     6c6:	8e 01       	movw	r16, r28
     6c8:	0f 5e       	subi	r16, 0xEF	; 239
     6ca:	1f 4f       	sbci	r17, 0xFF	; 255
     6cc:	ce 01       	movw	r24, r28
     6ce:	05 96       	adiw	r24, 0x05	; 5
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     6d6:	89 85       	ldd	r24, Y+9	; 0x09
     6d8:	82 30       	cpi	r24, 0x02	; 2
     6da:	40 f0       	brcs	.+16     	; 0x6ec <__gesf2+0x56>
     6dc:	89 89       	ldd	r24, Y+17	; 0x11
     6de:	82 30       	cpi	r24, 0x02	; 2
     6e0:	28 f0       	brcs	.+10     	; 0x6ec <__gesf2+0x56>
     6e2:	c7 01       	movw	r24, r14
     6e4:	b8 01       	movw	r22, r16
     6e6:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fpcmp_parts_f>
     6ea:	01 c0       	rjmp	.+2      	; 0x6ee <__gesf2+0x58>
     6ec:	8f ef       	ldi	r24, 0xFF	; 255
     6ee:	68 96       	adiw	r28, 0x18	; 24
     6f0:	e6 e0       	ldi	r30, 0x06	; 6
     6f2:	0c 94 cf 10 	jmp	0x219e	; 0x219e <__epilogue_restores__+0x18>

000006f6 <__ltsf2>:
     6f6:	a8 e1       	ldi	r26, 0x18	; 24
     6f8:	b0 e0       	ldi	r27, 0x00	; 0
     6fa:	e1 e8       	ldi	r30, 0x81	; 129
     6fc:	f3 e0       	ldi	r31, 0x03	; 3
     6fe:	0c 94 b3 10 	jmp	0x2166	; 0x2166 <__prologue_saves__+0x18>
     702:	69 83       	std	Y+1, r22	; 0x01
     704:	7a 83       	std	Y+2, r23	; 0x02
     706:	8b 83       	std	Y+3, r24	; 0x03
     708:	9c 83       	std	Y+4, r25	; 0x04
     70a:	2d 83       	std	Y+5, r18	; 0x05
     70c:	3e 83       	std	Y+6, r19	; 0x06
     70e:	4f 83       	std	Y+7, r20	; 0x07
     710:	58 87       	std	Y+8, r21	; 0x08
     712:	89 e0       	ldi	r24, 0x09	; 9
     714:	e8 2e       	mov	r14, r24
     716:	f1 2c       	mov	r15, r1
     718:	ec 0e       	add	r14, r28
     71a:	fd 1e       	adc	r15, r29
     71c:	ce 01       	movw	r24, r28
     71e:	01 96       	adiw	r24, 0x01	; 1
     720:	b7 01       	movw	r22, r14
     722:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     726:	8e 01       	movw	r16, r28
     728:	0f 5e       	subi	r16, 0xEF	; 239
     72a:	1f 4f       	sbci	r17, 0xFF	; 255
     72c:	ce 01       	movw	r24, r28
     72e:	05 96       	adiw	r24, 0x05	; 5
     730:	b8 01       	movw	r22, r16
     732:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     736:	89 85       	ldd	r24, Y+9	; 0x09
     738:	82 30       	cpi	r24, 0x02	; 2
     73a:	40 f0       	brcs	.+16     	; 0x74c <__ltsf2+0x56>
     73c:	89 89       	ldd	r24, Y+17	; 0x11
     73e:	82 30       	cpi	r24, 0x02	; 2
     740:	28 f0       	brcs	.+10     	; 0x74c <__ltsf2+0x56>
     742:	c7 01       	movw	r24, r14
     744:	b8 01       	movw	r22, r16
     746:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fpcmp_parts_f>
     74a:	01 c0       	rjmp	.+2      	; 0x74e <__ltsf2+0x58>
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	68 96       	adiw	r28, 0x18	; 24
     750:	e6 e0       	ldi	r30, 0x06	; 6
     752:	0c 94 cf 10 	jmp	0x219e	; 0x219e <__epilogue_restores__+0x18>

00000756 <__fixsfsi>:
     756:	ac e0       	ldi	r26, 0x0C	; 12
     758:	b0 e0       	ldi	r27, 0x00	; 0
     75a:	e1 eb       	ldi	r30, 0xB1	; 177
     75c:	f3 e0       	ldi	r31, 0x03	; 3
     75e:	0c 94 b7 10 	jmp	0x216e	; 0x216e <__prologue_saves__+0x20>
     762:	69 83       	std	Y+1, r22	; 0x01
     764:	7a 83       	std	Y+2, r23	; 0x02
     766:	8b 83       	std	Y+3, r24	; 0x03
     768:	9c 83       	std	Y+4, r25	; 0x04
     76a:	ce 01       	movw	r24, r28
     76c:	01 96       	adiw	r24, 0x01	; 1
     76e:	be 01       	movw	r22, r28
     770:	6b 5f       	subi	r22, 0xFB	; 251
     772:	7f 4f       	sbci	r23, 0xFF	; 255
     774:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     778:	8d 81       	ldd	r24, Y+5	; 0x05
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	61 f1       	breq	.+88     	; 0x7d6 <__fixsfsi+0x80>
     77e:	82 30       	cpi	r24, 0x02	; 2
     780:	50 f1       	brcs	.+84     	; 0x7d6 <__fixsfsi+0x80>
     782:	84 30       	cpi	r24, 0x04	; 4
     784:	21 f4       	brne	.+8      	; 0x78e <__fixsfsi+0x38>
     786:	8e 81       	ldd	r24, Y+6	; 0x06
     788:	88 23       	and	r24, r24
     78a:	51 f1       	breq	.+84     	; 0x7e0 <__fixsfsi+0x8a>
     78c:	2e c0       	rjmp	.+92     	; 0x7ea <__fixsfsi+0x94>
     78e:	2f 81       	ldd	r18, Y+7	; 0x07
     790:	38 85       	ldd	r19, Y+8	; 0x08
     792:	37 fd       	sbrc	r19, 7
     794:	20 c0       	rjmp	.+64     	; 0x7d6 <__fixsfsi+0x80>
     796:	6e 81       	ldd	r22, Y+6	; 0x06
     798:	2f 31       	cpi	r18, 0x1F	; 31
     79a:	31 05       	cpc	r19, r1
     79c:	1c f0       	brlt	.+6      	; 0x7a4 <__fixsfsi+0x4e>
     79e:	66 23       	and	r22, r22
     7a0:	f9 f0       	breq	.+62     	; 0x7e0 <__fixsfsi+0x8a>
     7a2:	23 c0       	rjmp	.+70     	; 0x7ea <__fixsfsi+0x94>
     7a4:	8e e1       	ldi	r24, 0x1E	; 30
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	82 1b       	sub	r24, r18
     7aa:	93 0b       	sbc	r25, r19
     7ac:	29 85       	ldd	r18, Y+9	; 0x09
     7ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     7b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     7b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b4:	04 c0       	rjmp	.+8      	; 0x7be <__fixsfsi+0x68>
     7b6:	56 95       	lsr	r21
     7b8:	47 95       	ror	r20
     7ba:	37 95       	ror	r19
     7bc:	27 95       	ror	r18
     7be:	8a 95       	dec	r24
     7c0:	d2 f7       	brpl	.-12     	; 0x7b6 <__fixsfsi+0x60>
     7c2:	66 23       	and	r22, r22
     7c4:	b1 f0       	breq	.+44     	; 0x7f2 <__fixsfsi+0x9c>
     7c6:	50 95       	com	r21
     7c8:	40 95       	com	r20
     7ca:	30 95       	com	r19
     7cc:	21 95       	neg	r18
     7ce:	3f 4f       	sbci	r19, 0xFF	; 255
     7d0:	4f 4f       	sbci	r20, 0xFF	; 255
     7d2:	5f 4f       	sbci	r21, 0xFF	; 255
     7d4:	0e c0       	rjmp	.+28     	; 0x7f2 <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	09 c0       	rjmp	.+18     	; 0x7f2 <__fixsfsi+0x9c>
     7e0:	2f ef       	ldi	r18, 0xFF	; 255
     7e2:	3f ef       	ldi	r19, 0xFF	; 255
     7e4:	4f ef       	ldi	r20, 0xFF	; 255
     7e6:	5f e7       	ldi	r21, 0x7F	; 127
     7e8:	04 c0       	rjmp	.+8      	; 0x7f2 <__fixsfsi+0x9c>
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	40 e0       	ldi	r20, 0x00	; 0
     7f0:	50 e8       	ldi	r21, 0x80	; 128
     7f2:	b9 01       	movw	r22, r18
     7f4:	ca 01       	movw	r24, r20
     7f6:	2c 96       	adiw	r28, 0x0c	; 12
     7f8:	e2 e0       	ldi	r30, 0x02	; 2
     7fa:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__epilogue_restores__+0x20>

000007fe <__pack_f>:
     7fe:	df 92       	push	r13
     800:	ef 92       	push	r14
     802:	ff 92       	push	r15
     804:	0f 93       	push	r16
     806:	1f 93       	push	r17
     808:	fc 01       	movw	r30, r24
     80a:	e4 80       	ldd	r14, Z+4	; 0x04
     80c:	f5 80       	ldd	r15, Z+5	; 0x05
     80e:	06 81       	ldd	r16, Z+6	; 0x06
     810:	17 81       	ldd	r17, Z+7	; 0x07
     812:	d1 80       	ldd	r13, Z+1	; 0x01
     814:	80 81       	ld	r24, Z
     816:	82 30       	cpi	r24, 0x02	; 2
     818:	48 f4       	brcc	.+18     	; 0x82c <__pack_f+0x2e>
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	a0 e1       	ldi	r26, 0x10	; 16
     820:	b0 e0       	ldi	r27, 0x00	; 0
     822:	e8 2a       	or	r14, r24
     824:	f9 2a       	or	r15, r25
     826:	0a 2b       	or	r16, r26
     828:	1b 2b       	or	r17, r27
     82a:	a5 c0       	rjmp	.+330    	; 0x976 <__stack+0x117>
     82c:	84 30       	cpi	r24, 0x04	; 4
     82e:	09 f4       	brne	.+2      	; 0x832 <__pack_f+0x34>
     830:	9f c0       	rjmp	.+318    	; 0x970 <__stack+0x111>
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	21 f4       	brne	.+8      	; 0x83e <__pack_f+0x40>
     836:	ee 24       	eor	r14, r14
     838:	ff 24       	eor	r15, r15
     83a:	87 01       	movw	r16, r14
     83c:	05 c0       	rjmp	.+10     	; 0x848 <__pack_f+0x4a>
     83e:	e1 14       	cp	r14, r1
     840:	f1 04       	cpc	r15, r1
     842:	01 05       	cpc	r16, r1
     844:	11 05       	cpc	r17, r1
     846:	19 f4       	brne	.+6      	; 0x84e <__pack_f+0x50>
     848:	e0 e0       	ldi	r30, 0x00	; 0
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	96 c0       	rjmp	.+300    	; 0x97a <__stack+0x11b>
     84e:	62 81       	ldd	r22, Z+2	; 0x02
     850:	73 81       	ldd	r23, Z+3	; 0x03
     852:	9f ef       	ldi	r25, 0xFF	; 255
     854:	62 38       	cpi	r22, 0x82	; 130
     856:	79 07       	cpc	r23, r25
     858:	0c f0       	brlt	.+2      	; 0x85c <__pack_f+0x5e>
     85a:	5b c0       	rjmp	.+182    	; 0x912 <__stack+0xb3>
     85c:	22 e8       	ldi	r18, 0x82	; 130
     85e:	3f ef       	ldi	r19, 0xFF	; 255
     860:	26 1b       	sub	r18, r22
     862:	37 0b       	sbc	r19, r23
     864:	2a 31       	cpi	r18, 0x1A	; 26
     866:	31 05       	cpc	r19, r1
     868:	2c f0       	brlt	.+10     	; 0x874 <__stack+0x15>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	2a c0       	rjmp	.+84     	; 0x8c8 <__stack+0x69>
     874:	b8 01       	movw	r22, r16
     876:	a7 01       	movw	r20, r14
     878:	02 2e       	mov	r0, r18
     87a:	04 c0       	rjmp	.+8      	; 0x884 <__stack+0x25>
     87c:	76 95       	lsr	r23
     87e:	67 95       	ror	r22
     880:	57 95       	ror	r21
     882:	47 95       	ror	r20
     884:	0a 94       	dec	r0
     886:	d2 f7       	brpl	.-12     	; 0x87c <__stack+0x1d>
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	a0 e0       	ldi	r26, 0x00	; 0
     88e:	b0 e0       	ldi	r27, 0x00	; 0
     890:	04 c0       	rjmp	.+8      	; 0x89a <__stack+0x3b>
     892:	88 0f       	add	r24, r24
     894:	99 1f       	adc	r25, r25
     896:	aa 1f       	adc	r26, r26
     898:	bb 1f       	adc	r27, r27
     89a:	2a 95       	dec	r18
     89c:	d2 f7       	brpl	.-12     	; 0x892 <__stack+0x33>
     89e:	01 97       	sbiw	r24, 0x01	; 1
     8a0:	a1 09       	sbc	r26, r1
     8a2:	b1 09       	sbc	r27, r1
     8a4:	8e 21       	and	r24, r14
     8a6:	9f 21       	and	r25, r15
     8a8:	a0 23       	and	r26, r16
     8aa:	b1 23       	and	r27, r17
     8ac:	00 97       	sbiw	r24, 0x00	; 0
     8ae:	a1 05       	cpc	r26, r1
     8b0:	b1 05       	cpc	r27, r1
     8b2:	21 f0       	breq	.+8      	; 0x8bc <__stack+0x5d>
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	a0 e0       	ldi	r26, 0x00	; 0
     8ba:	b0 e0       	ldi	r27, 0x00	; 0
     8bc:	9a 01       	movw	r18, r20
     8be:	ab 01       	movw	r20, r22
     8c0:	28 2b       	or	r18, r24
     8c2:	39 2b       	or	r19, r25
     8c4:	4a 2b       	or	r20, r26
     8c6:	5b 2b       	or	r21, r27
     8c8:	da 01       	movw	r26, r20
     8ca:	c9 01       	movw	r24, r18
     8cc:	8f 77       	andi	r24, 0x7F	; 127
     8ce:	90 70       	andi	r25, 0x00	; 0
     8d0:	a0 70       	andi	r26, 0x00	; 0
     8d2:	b0 70       	andi	r27, 0x00	; 0
     8d4:	80 34       	cpi	r24, 0x40	; 64
     8d6:	91 05       	cpc	r25, r1
     8d8:	a1 05       	cpc	r26, r1
     8da:	b1 05       	cpc	r27, r1
     8dc:	39 f4       	brne	.+14     	; 0x8ec <__stack+0x8d>
     8de:	27 ff       	sbrs	r18, 7
     8e0:	09 c0       	rjmp	.+18     	; 0x8f4 <__stack+0x95>
     8e2:	20 5c       	subi	r18, 0xC0	; 192
     8e4:	3f 4f       	sbci	r19, 0xFF	; 255
     8e6:	4f 4f       	sbci	r20, 0xFF	; 255
     8e8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ea:	04 c0       	rjmp	.+8      	; 0x8f4 <__stack+0x95>
     8ec:	21 5c       	subi	r18, 0xC1	; 193
     8ee:	3f 4f       	sbci	r19, 0xFF	; 255
     8f0:	4f 4f       	sbci	r20, 0xFF	; 255
     8f2:	5f 4f       	sbci	r21, 0xFF	; 255
     8f4:	e0 e0       	ldi	r30, 0x00	; 0
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	20 30       	cpi	r18, 0x00	; 0
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	3a 07       	cpc	r19, r26
     8fe:	a0 e0       	ldi	r26, 0x00	; 0
     900:	4a 07       	cpc	r20, r26
     902:	a0 e4       	ldi	r26, 0x40	; 64
     904:	5a 07       	cpc	r21, r26
     906:	10 f0       	brcs	.+4      	; 0x90c <__stack+0xad>
     908:	e1 e0       	ldi	r30, 0x01	; 1
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	79 01       	movw	r14, r18
     90e:	8a 01       	movw	r16, r20
     910:	27 c0       	rjmp	.+78     	; 0x960 <__stack+0x101>
     912:	60 38       	cpi	r22, 0x80	; 128
     914:	71 05       	cpc	r23, r1
     916:	64 f5       	brge	.+88     	; 0x970 <__stack+0x111>
     918:	fb 01       	movw	r30, r22
     91a:	e1 58       	subi	r30, 0x81	; 129
     91c:	ff 4f       	sbci	r31, 0xFF	; 255
     91e:	d8 01       	movw	r26, r16
     920:	c7 01       	movw	r24, r14
     922:	8f 77       	andi	r24, 0x7F	; 127
     924:	90 70       	andi	r25, 0x00	; 0
     926:	a0 70       	andi	r26, 0x00	; 0
     928:	b0 70       	andi	r27, 0x00	; 0
     92a:	80 34       	cpi	r24, 0x40	; 64
     92c:	91 05       	cpc	r25, r1
     92e:	a1 05       	cpc	r26, r1
     930:	b1 05       	cpc	r27, r1
     932:	39 f4       	brne	.+14     	; 0x942 <__stack+0xe3>
     934:	e7 fe       	sbrs	r14, 7
     936:	0d c0       	rjmp	.+26     	; 0x952 <__stack+0xf3>
     938:	80 e4       	ldi	r24, 0x40	; 64
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	04 c0       	rjmp	.+8      	; 0x94a <__stack+0xeb>
     942:	8f e3       	ldi	r24, 0x3F	; 63
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	a0 e0       	ldi	r26, 0x00	; 0
     948:	b0 e0       	ldi	r27, 0x00	; 0
     94a:	e8 0e       	add	r14, r24
     94c:	f9 1e       	adc	r15, r25
     94e:	0a 1f       	adc	r16, r26
     950:	1b 1f       	adc	r17, r27
     952:	17 ff       	sbrs	r17, 7
     954:	05 c0       	rjmp	.+10     	; 0x960 <__stack+0x101>
     956:	16 95       	lsr	r17
     958:	07 95       	ror	r16
     95a:	f7 94       	ror	r15
     95c:	e7 94       	ror	r14
     95e:	31 96       	adiw	r30, 0x01	; 1
     960:	87 e0       	ldi	r24, 0x07	; 7
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d1 f7       	brne	.-12     	; 0x962 <__stack+0x103>
     96e:	05 c0       	rjmp	.+10     	; 0x97a <__stack+0x11b>
     970:	ee 24       	eor	r14, r14
     972:	ff 24       	eor	r15, r15
     974:	87 01       	movw	r16, r14
     976:	ef ef       	ldi	r30, 0xFF	; 255
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	6e 2f       	mov	r22, r30
     97c:	67 95       	ror	r22
     97e:	66 27       	eor	r22, r22
     980:	67 95       	ror	r22
     982:	90 2f       	mov	r25, r16
     984:	9f 77       	andi	r25, 0x7F	; 127
     986:	d7 94       	ror	r13
     988:	dd 24       	eor	r13, r13
     98a:	d7 94       	ror	r13
     98c:	8e 2f       	mov	r24, r30
     98e:	86 95       	lsr	r24
     990:	49 2f       	mov	r20, r25
     992:	46 2b       	or	r20, r22
     994:	58 2f       	mov	r21, r24
     996:	5d 29       	or	r21, r13
     998:	b7 01       	movw	r22, r14
     99a:	ca 01       	movw	r24, r20
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	ff 90       	pop	r15
     9a2:	ef 90       	pop	r14
     9a4:	df 90       	pop	r13
     9a6:	08 95       	ret

000009a8 <__unpack_f>:
     9a8:	fc 01       	movw	r30, r24
     9aa:	db 01       	movw	r26, r22
     9ac:	40 81       	ld	r20, Z
     9ae:	51 81       	ldd	r21, Z+1	; 0x01
     9b0:	22 81       	ldd	r18, Z+2	; 0x02
     9b2:	62 2f       	mov	r22, r18
     9b4:	6f 77       	andi	r22, 0x7F	; 127
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	22 1f       	adc	r18, r18
     9ba:	22 27       	eor	r18, r18
     9bc:	22 1f       	adc	r18, r18
     9be:	93 81       	ldd	r25, Z+3	; 0x03
     9c0:	89 2f       	mov	r24, r25
     9c2:	88 0f       	add	r24, r24
     9c4:	82 2b       	or	r24, r18
     9c6:	28 2f       	mov	r18, r24
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	99 1f       	adc	r25, r25
     9cc:	99 27       	eor	r25, r25
     9ce:	99 1f       	adc	r25, r25
     9d0:	11 96       	adiw	r26, 0x01	; 1
     9d2:	9c 93       	st	X, r25
     9d4:	11 97       	sbiw	r26, 0x01	; 1
     9d6:	21 15       	cp	r18, r1
     9d8:	31 05       	cpc	r19, r1
     9da:	a9 f5       	brne	.+106    	; 0xa46 <__unpack_f+0x9e>
     9dc:	41 15       	cp	r20, r1
     9de:	51 05       	cpc	r21, r1
     9e0:	61 05       	cpc	r22, r1
     9e2:	71 05       	cpc	r23, r1
     9e4:	11 f4       	brne	.+4      	; 0x9ea <__unpack_f+0x42>
     9e6:	82 e0       	ldi	r24, 0x02	; 2
     9e8:	37 c0       	rjmp	.+110    	; 0xa58 <__unpack_f+0xb0>
     9ea:	82 e8       	ldi	r24, 0x82	; 130
     9ec:	9f ef       	ldi	r25, 0xFF	; 255
     9ee:	13 96       	adiw	r26, 0x03	; 3
     9f0:	9c 93       	st	X, r25
     9f2:	8e 93       	st	-X, r24
     9f4:	12 97       	sbiw	r26, 0x02	; 2
     9f6:	9a 01       	movw	r18, r20
     9f8:	ab 01       	movw	r20, r22
     9fa:	67 e0       	ldi	r22, 0x07	; 7
     9fc:	22 0f       	add	r18, r18
     9fe:	33 1f       	adc	r19, r19
     a00:	44 1f       	adc	r20, r20
     a02:	55 1f       	adc	r21, r21
     a04:	6a 95       	dec	r22
     a06:	d1 f7       	brne	.-12     	; 0x9fc <__unpack_f+0x54>
     a08:	83 e0       	ldi	r24, 0x03	; 3
     a0a:	8c 93       	st	X, r24
     a0c:	0d c0       	rjmp	.+26     	; 0xa28 <__unpack_f+0x80>
     a0e:	22 0f       	add	r18, r18
     a10:	33 1f       	adc	r19, r19
     a12:	44 1f       	adc	r20, r20
     a14:	55 1f       	adc	r21, r21
     a16:	12 96       	adiw	r26, 0x02	; 2
     a18:	8d 91       	ld	r24, X+
     a1a:	9c 91       	ld	r25, X
     a1c:	13 97       	sbiw	r26, 0x03	; 3
     a1e:	01 97       	sbiw	r24, 0x01	; 1
     a20:	13 96       	adiw	r26, 0x03	; 3
     a22:	9c 93       	st	X, r25
     a24:	8e 93       	st	-X, r24
     a26:	12 97       	sbiw	r26, 0x02	; 2
     a28:	20 30       	cpi	r18, 0x00	; 0
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	38 07       	cpc	r19, r24
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	48 07       	cpc	r20, r24
     a32:	80 e4       	ldi	r24, 0x40	; 64
     a34:	58 07       	cpc	r21, r24
     a36:	58 f3       	brcs	.-42     	; 0xa0e <__unpack_f+0x66>
     a38:	14 96       	adiw	r26, 0x04	; 4
     a3a:	2d 93       	st	X+, r18
     a3c:	3d 93       	st	X+, r19
     a3e:	4d 93       	st	X+, r20
     a40:	5c 93       	st	X, r21
     a42:	17 97       	sbiw	r26, 0x07	; 7
     a44:	08 95       	ret
     a46:	2f 3f       	cpi	r18, 0xFF	; 255
     a48:	31 05       	cpc	r19, r1
     a4a:	79 f4       	brne	.+30     	; 0xa6a <__unpack_f+0xc2>
     a4c:	41 15       	cp	r20, r1
     a4e:	51 05       	cpc	r21, r1
     a50:	61 05       	cpc	r22, r1
     a52:	71 05       	cpc	r23, r1
     a54:	19 f4       	brne	.+6      	; 0xa5c <__unpack_f+0xb4>
     a56:	84 e0       	ldi	r24, 0x04	; 4
     a58:	8c 93       	st	X, r24
     a5a:	08 95       	ret
     a5c:	64 ff       	sbrs	r22, 4
     a5e:	03 c0       	rjmp	.+6      	; 0xa66 <__unpack_f+0xbe>
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	8c 93       	st	X, r24
     a64:	12 c0       	rjmp	.+36     	; 0xa8a <__unpack_f+0xe2>
     a66:	1c 92       	st	X, r1
     a68:	10 c0       	rjmp	.+32     	; 0xa8a <__unpack_f+0xe2>
     a6a:	2f 57       	subi	r18, 0x7F	; 127
     a6c:	30 40       	sbci	r19, 0x00	; 0
     a6e:	13 96       	adiw	r26, 0x03	; 3
     a70:	3c 93       	st	X, r19
     a72:	2e 93       	st	-X, r18
     a74:	12 97       	sbiw	r26, 0x02	; 2
     a76:	83 e0       	ldi	r24, 0x03	; 3
     a78:	8c 93       	st	X, r24
     a7a:	87 e0       	ldi	r24, 0x07	; 7
     a7c:	44 0f       	add	r20, r20
     a7e:	55 1f       	adc	r21, r21
     a80:	66 1f       	adc	r22, r22
     a82:	77 1f       	adc	r23, r23
     a84:	8a 95       	dec	r24
     a86:	d1 f7       	brne	.-12     	; 0xa7c <__unpack_f+0xd4>
     a88:	70 64       	ori	r23, 0x40	; 64
     a8a:	14 96       	adiw	r26, 0x04	; 4
     a8c:	4d 93       	st	X+, r20
     a8e:	5d 93       	st	X+, r21
     a90:	6d 93       	st	X+, r22
     a92:	7c 93       	st	X, r23
     a94:	17 97       	sbiw	r26, 0x07	; 7
     a96:	08 95       	ret

00000a98 <__fpcmp_parts_f>:
     a98:	1f 93       	push	r17
     a9a:	dc 01       	movw	r26, r24
     a9c:	fb 01       	movw	r30, r22
     a9e:	9c 91       	ld	r25, X
     aa0:	92 30       	cpi	r25, 0x02	; 2
     aa2:	08 f4       	brcc	.+2      	; 0xaa6 <__fpcmp_parts_f+0xe>
     aa4:	47 c0       	rjmp	.+142    	; 0xb34 <__fpcmp_parts_f+0x9c>
     aa6:	80 81       	ld	r24, Z
     aa8:	82 30       	cpi	r24, 0x02	; 2
     aaa:	08 f4       	brcc	.+2      	; 0xaae <__fpcmp_parts_f+0x16>
     aac:	43 c0       	rjmp	.+134    	; 0xb34 <__fpcmp_parts_f+0x9c>
     aae:	94 30       	cpi	r25, 0x04	; 4
     ab0:	51 f4       	brne	.+20     	; 0xac6 <__fpcmp_parts_f+0x2e>
     ab2:	11 96       	adiw	r26, 0x01	; 1
     ab4:	1c 91       	ld	r17, X
     ab6:	84 30       	cpi	r24, 0x04	; 4
     ab8:	99 f5       	brne	.+102    	; 0xb20 <__fpcmp_parts_f+0x88>
     aba:	81 81       	ldd	r24, Z+1	; 0x01
     abc:	68 2f       	mov	r22, r24
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	61 1b       	sub	r22, r17
     ac2:	71 09       	sbc	r23, r1
     ac4:	3f c0       	rjmp	.+126    	; 0xb44 <__fpcmp_parts_f+0xac>
     ac6:	84 30       	cpi	r24, 0x04	; 4
     ac8:	21 f0       	breq	.+8      	; 0xad2 <__fpcmp_parts_f+0x3a>
     aca:	92 30       	cpi	r25, 0x02	; 2
     acc:	31 f4       	brne	.+12     	; 0xada <__fpcmp_parts_f+0x42>
     ace:	82 30       	cpi	r24, 0x02	; 2
     ad0:	b9 f1       	breq	.+110    	; 0xb40 <__fpcmp_parts_f+0xa8>
     ad2:	81 81       	ldd	r24, Z+1	; 0x01
     ad4:	88 23       	and	r24, r24
     ad6:	89 f1       	breq	.+98     	; 0xb3a <__fpcmp_parts_f+0xa2>
     ad8:	2d c0       	rjmp	.+90     	; 0xb34 <__fpcmp_parts_f+0x9c>
     ada:	11 96       	adiw	r26, 0x01	; 1
     adc:	1c 91       	ld	r17, X
     ade:	11 97       	sbiw	r26, 0x01	; 1
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	f1 f0       	breq	.+60     	; 0xb20 <__fpcmp_parts_f+0x88>
     ae4:	81 81       	ldd	r24, Z+1	; 0x01
     ae6:	18 17       	cp	r17, r24
     ae8:	d9 f4       	brne	.+54     	; 0xb20 <__fpcmp_parts_f+0x88>
     aea:	12 96       	adiw	r26, 0x02	; 2
     aec:	2d 91       	ld	r18, X+
     aee:	3c 91       	ld	r19, X
     af0:	13 97       	sbiw	r26, 0x03	; 3
     af2:	82 81       	ldd	r24, Z+2	; 0x02
     af4:	93 81       	ldd	r25, Z+3	; 0x03
     af6:	82 17       	cp	r24, r18
     af8:	93 07       	cpc	r25, r19
     afa:	94 f0       	brlt	.+36     	; 0xb20 <__fpcmp_parts_f+0x88>
     afc:	28 17       	cp	r18, r24
     afe:	39 07       	cpc	r19, r25
     b00:	bc f0       	brlt	.+46     	; 0xb30 <__fpcmp_parts_f+0x98>
     b02:	14 96       	adiw	r26, 0x04	; 4
     b04:	8d 91       	ld	r24, X+
     b06:	9d 91       	ld	r25, X+
     b08:	0d 90       	ld	r0, X+
     b0a:	bc 91       	ld	r27, X
     b0c:	a0 2d       	mov	r26, r0
     b0e:	24 81       	ldd	r18, Z+4	; 0x04
     b10:	35 81       	ldd	r19, Z+5	; 0x05
     b12:	46 81       	ldd	r20, Z+6	; 0x06
     b14:	57 81       	ldd	r21, Z+7	; 0x07
     b16:	28 17       	cp	r18, r24
     b18:	39 07       	cpc	r19, r25
     b1a:	4a 07       	cpc	r20, r26
     b1c:	5b 07       	cpc	r21, r27
     b1e:	18 f4       	brcc	.+6      	; 0xb26 <__fpcmp_parts_f+0x8e>
     b20:	11 23       	and	r17, r17
     b22:	41 f0       	breq	.+16     	; 0xb34 <__fpcmp_parts_f+0x9c>
     b24:	0a c0       	rjmp	.+20     	; 0xb3a <__fpcmp_parts_f+0xa2>
     b26:	82 17       	cp	r24, r18
     b28:	93 07       	cpc	r25, r19
     b2a:	a4 07       	cpc	r26, r20
     b2c:	b5 07       	cpc	r27, r21
     b2e:	40 f4       	brcc	.+16     	; 0xb40 <__fpcmp_parts_f+0xa8>
     b30:	11 23       	and	r17, r17
     b32:	19 f0       	breq	.+6      	; 0xb3a <__fpcmp_parts_f+0xa2>
     b34:	61 e0       	ldi	r22, 0x01	; 1
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	05 c0       	rjmp	.+10     	; 0xb44 <__fpcmp_parts_f+0xac>
     b3a:	6f ef       	ldi	r22, 0xFF	; 255
     b3c:	7f ef       	ldi	r23, 0xFF	; 255
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <__fpcmp_parts_f+0xac>
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	cb 01       	movw	r24, r22
     b46:	1f 91       	pop	r17
     b48:	08 95       	ret

00000b4a <keyPressesd>:
#include "KeyPad.h"


int keyPressesd(){
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <keyPressesd+0x6>
     b50:	00 d0       	rcall	.+0      	; 0xb52 <keyPressesd+0x8>
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
	int col , row;
	while(1){
		for(col=0;col<3;col++){
     b56:	1c 82       	std	Y+4, r1	; 0x04
     b58:	1b 82       	std	Y+3, r1	; 0x03
     b5a:	52 c0       	rjmp	.+164    	; 0xc00 <keyPressesd+0xb6>

			DDRA|=(0b00100000<<col);
     b5c:	aa e3       	ldi	r26, 0x3A	; 58
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ea e3       	ldi	r30, 0x3A	; 58
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	28 2f       	mov	r18, r24
     b68:	80 e2       	ldi	r24, 0x20	; 32
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0b 80       	ldd	r0, Y+3	; 0x03
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <keyPressesd+0x2a>
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	0a 94       	dec	r0
     b76:	e2 f7       	brpl	.-8      	; 0xb70 <keyPressesd+0x26>
     b78:	82 2b       	or	r24, r18
     b7a:	8c 93       	st	X, r24
			PORTA = (~(0b00100000<<col));
     b7c:	eb e3       	ldi	r30, 0x3B	; 59
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 e2       	ldi	r24, 0x20	; 32
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0b 80       	ldd	r0, Y+3	; 0x03
     b86:	02 c0       	rjmp	.+4      	; 0xb8c <keyPressesd+0x42>
     b88:	88 0f       	add	r24, r24
     b8a:	99 1f       	adc	r25, r25
     b8c:	0a 94       	dec	r0
     b8e:	e2 f7       	brpl	.-8      	; 0xb88 <keyPressesd+0x3e>
     b90:	80 95       	com	r24
     b92:	80 83       	st	Z, r24

			for(row=0;row<4;row++){
     b94:	1a 82       	std	Y+2, r1	; 0x02
     b96:	19 82       	std	Y+1, r1	; 0x01
     b98:	29 c0       	rjmp	.+82     	; 0xbec <keyPressesd+0xa2>
				if( (PINA&(1<<row)) == 0){
     b9a:	e9 e3       	ldi	r30, 0x39	; 57
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	88 2f       	mov	r24, r24
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	09 80       	ldd	r0, Y+1	; 0x01
     ba6:	02 c0       	rjmp	.+4      	; 0xbac <keyPressesd+0x62>
     ba8:	95 95       	asr	r25
     baa:	87 95       	ror	r24
     bac:	0a 94       	dec	r0
     bae:	e2 f7       	brpl	.-8      	; 0xba8 <keyPressesd+0x5e>
     bb0:	81 70       	andi	r24, 0x01	; 1
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	00 97       	sbiw	r24, 0x00	; 0
     bb6:	a9 f4       	brne	.+42     	; 0xbe2 <keyPressesd+0x98>
				return adjustKeyPressed((row*3)+col+1);
     bb8:	29 81       	ldd	r18, Y+1	; 0x01
     bba:	3a 81       	ldd	r19, Y+2	; 0x02
     bbc:	c9 01       	movw	r24, r18
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	28 0f       	add	r18, r24
     bc4:	39 1f       	adc	r19, r25
     bc6:	8b 81       	ldd	r24, Y+3	; 0x03
     bc8:	9c 81       	ldd	r25, Y+4	; 0x04
     bca:	82 0f       	add	r24, r18
     bcc:	93 1f       	adc	r25, r19
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	0e 94 07 06 	call	0xc0e	; 0xc0e <adjustKeyPressed>
				}
			}
		}
	}
}
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	cf 91       	pop	r28
     bde:	df 91       	pop	r29
     be0:	08 95       	ret
		for(col=0;col<3;col++){

			DDRA|=(0b00100000<<col);
			PORTA = (~(0b00100000<<col));

			for(row=0;row<4;row++){
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	9a 81       	ldd	r25, Y+2	; 0x02
     be6:	01 96       	adiw	r24, 0x01	; 1
     be8:	9a 83       	std	Y+2, r25	; 0x02
     bea:	89 83       	std	Y+1, r24	; 0x01
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	9a 81       	ldd	r25, Y+2	; 0x02
     bf0:	84 30       	cpi	r24, 0x04	; 4
     bf2:	91 05       	cpc	r25, r1
     bf4:	94 f2       	brlt	.-92     	; 0xb9a <keyPressesd+0x50>


int keyPressesd(){
	int col , row;
	while(1){
		for(col=0;col<3;col++){
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	9c 81       	ldd	r25, Y+4	; 0x04
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	9c 83       	std	Y+4, r25	; 0x04
     bfe:	8b 83       	std	Y+3, r24	; 0x03
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	9c 81       	ldd	r25, Y+4	; 0x04
     c04:	83 30       	cpi	r24, 0x03	; 3
     c06:	91 05       	cpc	r25, r1
     c08:	0c f4       	brge	.+2      	; 0xc0c <keyPressesd+0xc2>
     c0a:	a8 cf       	rjmp	.-176    	; 0xb5c <keyPressesd+0x12>
     c0c:	a4 cf       	rjmp	.-184    	; 0xb56 <keyPressesd+0xc>

00000c0e <adjustKeyPressed>:
			}
		}
	}
}

 int adjustKeyPressed(int keyVal){
     c0e:	df 93       	push	r29
     c10:	cf 93       	push	r28
     c12:	00 d0       	rcall	.+0      	; 0xc14 <adjustKeyPressed+0x6>
     c14:	00 d0       	rcall	.+0      	; 0xc16 <adjustKeyPressed+0x8>
     c16:	00 d0       	rcall	.+0      	; 0xc18 <adjustKeyPressed+0xa>
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
	switch(keyVal){
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	9a 81       	ldd	r25, Y+2	; 0x02
     c24:	9e 83       	std	Y+6, r25	; 0x06
     c26:	8d 83       	std	Y+5, r24	; 0x05
     c28:	8d 81       	ldd	r24, Y+5	; 0x05
     c2a:	9e 81       	ldd	r25, Y+6	; 0x06
     c2c:	8a 30       	cpi	r24, 0x0A	; 10
     c2e:	91 05       	cpc	r25, r1
     c30:	81 f0       	breq	.+32     	; 0xc52 <adjustKeyPressed+0x44>
     c32:	8d 81       	ldd	r24, Y+5	; 0x05
     c34:	9e 81       	ldd	r25, Y+6	; 0x06
     c36:	8a 30       	cpi	r24, 0x0A	; 10
     c38:	91 05       	cpc	r25, r1
     c3a:	c4 f0       	brlt	.+48     	; 0xc6c <adjustKeyPressed+0x5e>
     c3c:	8d 81       	ldd	r24, Y+5	; 0x05
     c3e:	9e 81       	ldd	r25, Y+6	; 0x06
     c40:	8b 30       	cpi	r24, 0x0B	; 11
     c42:	91 05       	cpc	r25, r1
     c44:	59 f0       	breq	.+22     	; 0xc5c <adjustKeyPressed+0x4e>
     c46:	8d 81       	ldd	r24, Y+5	; 0x05
     c48:	9e 81       	ldd	r25, Y+6	; 0x06
     c4a:	8c 30       	cpi	r24, 0x0C	; 12
     c4c:	91 05       	cpc	r25, r1
     c4e:	49 f0       	breq	.+18     	; 0xc62 <adjustKeyPressed+0x54>
     c50:	0d c0       	rjmp	.+26     	; 0xc6c <adjustKeyPressed+0x5e>
		case 10 : return '*';
     c52:	8a e2       	ldi	r24, 0x2A	; 42
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	9c 83       	std	Y+4, r25	; 0x04
     c58:	8b 83       	std	Y+3, r24	; 0x03
     c5a:	0c c0       	rjmp	.+24     	; 0xc74 <adjustKeyPressed+0x66>
				  break;
		case 11 : return 0 ;
     c5c:	1c 82       	std	Y+4, r1	; 0x04
     c5e:	1b 82       	std	Y+3, r1	; 0x03
     c60:	09 c0       	rjmp	.+18     	; 0xc74 <adjustKeyPressed+0x66>
				  break;
		case 12 : return '#' ;
     c62:	83 e2       	ldi	r24, 0x23	; 35
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	9c 83       	std	Y+4, r25	; 0x04
     c68:	8b 83       	std	Y+3, r24	; 0x03
     c6a:	04 c0       	rjmp	.+8      	; 0xc74 <adjustKeyPressed+0x66>
				  break;
		default: return keyVal;
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	9a 81       	ldd	r25, Y+2	; 0x02
     c70:	9c 83       	std	Y+4, r25	; 0x04
     c72:	8b 83       	std	Y+3, r24	; 0x03
     c74:	8b 81       	ldd	r24, Y+3	; 0x03
     c76:	9c 81       	ldd	r25, Y+4	; 0x04
	}
}
     c78:	26 96       	adiw	r28, 0x06	; 6
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	f8 94       	cli
     c7e:	de bf       	out	0x3e, r29	; 62
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	cd bf       	out	0x3d, r28	; 61
     c84:	cf 91       	pop	r28
     c86:	df 91       	pop	r29
     c88:	08 95       	ret

00000c8a <LCD_sendCommand>:
#include "mainHeader.h"
#include "LCD.h"


 void LCD_sendCommand(unsigned char command){
     c8a:	df 93       	push	r29
     c8c:	cf 93       	push	r28
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
     c92:	e9 97       	sbiw	r28, 0x39	; 57
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	de bf       	out	0x3e, r29	; 62
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	cd bf       	out	0x3d, r28	; 61
     c9e:	89 af       	std	Y+57, r24	; 0x39
	 PORTD &= (~(1<<PD7));	// RS = 0
     ca0:	a2 e3       	ldi	r26, 0x32	; 50
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	e2 e3       	ldi	r30, 0x32	; 50
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	8f 77       	andi	r24, 0x7F	; 127
     cac:	8c 93       	st	X, r24
	 PORTD &= (~(1<<PD6));  // RW = 0
     cae:	a2 e3       	ldi	r26, 0x32	; 50
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e2 e3       	ldi	r30, 0x32	; 50
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	8f 7b       	andi	r24, 0xBF	; 191
     cba:	8c 93       	st	X, r24
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	a0 e8       	ldi	r26, 0x80	; 128
     cc2:	bf e3       	ldi	r27, 0x3F	; 63
     cc4:	8d ab       	std	Y+53, r24	; 0x35
     cc6:	9e ab       	std	Y+54, r25	; 0x36
     cc8:	af ab       	std	Y+55, r26	; 0x37
     cca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ccc:	6d a9       	ldd	r22, Y+53	; 0x35
     cce:	7e a9       	ldd	r23, Y+54	; 0x36
     cd0:	8f a9       	ldd	r24, Y+55	; 0x37
     cd2:	98 ad       	ldd	r25, Y+56	; 0x38
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	4a ef       	ldi	r20, 0xFA	; 250
     cda:	54 e4       	ldi	r21, 0x44	; 68
     cdc:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
     ce0:	dc 01       	movw	r26, r24
     ce2:	cb 01       	movw	r24, r22
     ce4:	89 ab       	std	Y+49, r24	; 0x31
     ce6:	9a ab       	std	Y+50, r25	; 0x32
     ce8:	ab ab       	std	Y+51, r26	; 0x33
     cea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     cec:	69 a9       	ldd	r22, Y+49	; 0x31
     cee:	7a a9       	ldd	r23, Y+50	; 0x32
     cf0:	8b a9       	ldd	r24, Y+51	; 0x33
     cf2:	9c a9       	ldd	r25, Y+52	; 0x34
     cf4:	20 e0       	ldi	r18, 0x00	; 0
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	40 e8       	ldi	r20, 0x80	; 128
     cfa:	5f e3       	ldi	r21, 0x3F	; 63
     cfc:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
     d00:	88 23       	and	r24, r24
     d02:	2c f4       	brge	.+10     	; 0xd0e <LCD_sendCommand+0x84>
		__ticks = 1;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	98 ab       	std	Y+48, r25	; 0x30
     d0a:	8f a7       	std	Y+47, r24	; 0x2f
     d0c:	3f c0       	rjmp	.+126    	; 0xd8c <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
     d0e:	69 a9       	ldd	r22, Y+49	; 0x31
     d10:	7a a9       	ldd	r23, Y+50	; 0x32
     d12:	8b a9       	ldd	r24, Y+51	; 0x33
     d14:	9c a9       	ldd	r25, Y+52	; 0x34
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	3f ef       	ldi	r19, 0xFF	; 255
     d1a:	4f e7       	ldi	r20, 0x7F	; 127
     d1c:	57 e4       	ldi	r21, 0x47	; 71
     d1e:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
     d22:	18 16       	cp	r1, r24
     d24:	4c f5       	brge	.+82     	; 0xd78 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d26:	6d a9       	ldd	r22, Y+53	; 0x35
     d28:	7e a9       	ldd	r23, Y+54	; 0x36
     d2a:	8f a9       	ldd	r24, Y+55	; 0x37
     d2c:	98 ad       	ldd	r25, Y+56	; 0x38
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	40 e2       	ldi	r20, 0x20	; 32
     d34:	51 e4       	ldi	r21, 0x41	; 65
     d36:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
     d3a:	dc 01       	movw	r26, r24
     d3c:	cb 01       	movw	r24, r22
     d3e:	bc 01       	movw	r22, r24
     d40:	cd 01       	movw	r24, r26
     d42:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
     d46:	dc 01       	movw	r26, r24
     d48:	cb 01       	movw	r24, r22
     d4a:	98 ab       	std	Y+48, r25	; 0x30
     d4c:	8f a7       	std	Y+47, r24	; 0x2f
     d4e:	0f c0       	rjmp	.+30     	; 0xd6e <LCD_sendCommand+0xe4>
     d50:	88 ec       	ldi	r24, 0xC8	; 200
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	9e a7       	std	Y+46, r25	; 0x2e
     d56:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d58:	8d a5       	ldd	r24, Y+45	; 0x2d
     d5a:	9e a5       	ldd	r25, Y+46	; 0x2e
     d5c:	01 97       	sbiw	r24, 0x01	; 1
     d5e:	f1 f7       	brne	.-4      	; 0xd5c <LCD_sendCommand+0xd2>
     d60:	9e a7       	std	Y+46, r25	; 0x2e
     d62:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d64:	8f a5       	ldd	r24, Y+47	; 0x2f
     d66:	98 a9       	ldd	r25, Y+48	; 0x30
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	98 ab       	std	Y+48, r25	; 0x30
     d6c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d6e:	8f a5       	ldd	r24, Y+47	; 0x2f
     d70:	98 a9       	ldd	r25, Y+48	; 0x30
     d72:	00 97       	sbiw	r24, 0x00	; 0
     d74:	69 f7       	brne	.-38     	; 0xd50 <LCD_sendCommand+0xc6>
     d76:	14 c0       	rjmp	.+40     	; 0xda0 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d78:	69 a9       	ldd	r22, Y+49	; 0x31
     d7a:	7a a9       	ldd	r23, Y+50	; 0x32
     d7c:	8b a9       	ldd	r24, Y+51	; 0x33
     d7e:	9c a9       	ldd	r25, Y+52	; 0x34
     d80:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
     d84:	dc 01       	movw	r26, r24
     d86:	cb 01       	movw	r24, r22
     d88:	98 ab       	std	Y+48, r25	; 0x30
     d8a:	8f a7       	std	Y+47, r24	; 0x2f
     d8c:	8f a5       	ldd	r24, Y+47	; 0x2f
     d8e:	98 a9       	ldd	r25, Y+48	; 0x30
     d90:	9c a7       	std	Y+44, r25	; 0x2c
     d92:	8b a7       	std	Y+43, r24	; 0x2b
     d94:	8b a5       	ldd	r24, Y+43	; 0x2b
     d96:	9c a5       	ldd	r25, Y+44	; 0x2c
     d98:	01 97       	sbiw	r24, 0x01	; 1
     d9a:	f1 f7       	brne	.-4      	; 0xd98 <LCD_sendCommand+0x10e>
     d9c:	9c a7       	std	Y+44, r25	; 0x2c
     d9e:	8b a7       	std	Y+43, r24	; 0x2b

	 _delay_ms(1);
	 PORTD |= (1<<PD5);
     da0:	a2 e3       	ldi	r26, 0x32	; 50
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e2 e3       	ldi	r30, 0x32	; 50
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	80 62       	ori	r24, 0x20	; 32
     dac:	8c 93       	st	X, r24
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	a0 e8       	ldi	r26, 0x80	; 128
     db4:	bf e3       	ldi	r27, 0x3F	; 63
     db6:	8f a3       	std	Y+39, r24	; 0x27
     db8:	98 a7       	std	Y+40, r25	; 0x28
     dba:	a9 a7       	std	Y+41, r26	; 0x29
     dbc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dbe:	6f a1       	ldd	r22, Y+39	; 0x27
     dc0:	78 a5       	ldd	r23, Y+40	; 0x28
     dc2:	89 a5       	ldd	r24, Y+41	; 0x29
     dc4:	9a a5       	ldd	r25, Y+42	; 0x2a
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	4a ef       	ldi	r20, 0xFA	; 250
     dcc:	54 e4       	ldi	r21, 0x44	; 68
     dce:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	8b a3       	std	Y+35, r24	; 0x23
     dd8:	9c a3       	std	Y+36, r25	; 0x24
     dda:	ad a3       	std	Y+37, r26	; 0x25
     ddc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     dde:	6b a1       	ldd	r22, Y+35	; 0x23
     de0:	7c a1       	ldd	r23, Y+36	; 0x24
     de2:	8d a1       	ldd	r24, Y+37	; 0x25
     de4:	9e a1       	ldd	r25, Y+38	; 0x26
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	40 e8       	ldi	r20, 0x80	; 128
     dec:	5f e3       	ldi	r21, 0x3F	; 63
     dee:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
     df2:	88 23       	and	r24, r24
     df4:	2c f4       	brge	.+10     	; 0xe00 <LCD_sendCommand+0x176>
		__ticks = 1;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	9a a3       	std	Y+34, r25	; 0x22
     dfc:	89 a3       	std	Y+33, r24	; 0x21
     dfe:	3f c0       	rjmp	.+126    	; 0xe7e <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
     e00:	6b a1       	ldd	r22, Y+35	; 0x23
     e02:	7c a1       	ldd	r23, Y+36	; 0x24
     e04:	8d a1       	ldd	r24, Y+37	; 0x25
     e06:	9e a1       	ldd	r25, Y+38	; 0x26
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	3f ef       	ldi	r19, 0xFF	; 255
     e0c:	4f e7       	ldi	r20, 0x7F	; 127
     e0e:	57 e4       	ldi	r21, 0x47	; 71
     e10:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
     e14:	18 16       	cp	r1, r24
     e16:	4c f5       	brge	.+82     	; 0xe6a <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e18:	6f a1       	ldd	r22, Y+39	; 0x27
     e1a:	78 a5       	ldd	r23, Y+40	; 0x28
     e1c:	89 a5       	ldd	r24, Y+41	; 0x29
     e1e:	9a a5       	ldd	r25, Y+42	; 0x2a
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	40 e2       	ldi	r20, 0x20	; 32
     e26:	51 e4       	ldi	r21, 0x41	; 65
     e28:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
     e2c:	dc 01       	movw	r26, r24
     e2e:	cb 01       	movw	r24, r22
     e30:	bc 01       	movw	r22, r24
     e32:	cd 01       	movw	r24, r26
     e34:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
     e38:	dc 01       	movw	r26, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	9a a3       	std	Y+34, r25	; 0x22
     e3e:	89 a3       	std	Y+33, r24	; 0x21
     e40:	0f c0       	rjmp	.+30     	; 0xe60 <LCD_sendCommand+0x1d6>
     e42:	88 ec       	ldi	r24, 0xC8	; 200
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	98 a3       	std	Y+32, r25	; 0x20
     e48:	8f 8f       	std	Y+31, r24	; 0x1f
     e4a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e4c:	98 a1       	ldd	r25, Y+32	; 0x20
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	f1 f7       	brne	.-4      	; 0xe4e <LCD_sendCommand+0x1c4>
     e52:	98 a3       	std	Y+32, r25	; 0x20
     e54:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e56:	89 a1       	ldd	r24, Y+33	; 0x21
     e58:	9a a1       	ldd	r25, Y+34	; 0x22
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	9a a3       	std	Y+34, r25	; 0x22
     e5e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e60:	89 a1       	ldd	r24, Y+33	; 0x21
     e62:	9a a1       	ldd	r25, Y+34	; 0x22
     e64:	00 97       	sbiw	r24, 0x00	; 0
     e66:	69 f7       	brne	.-38     	; 0xe42 <LCD_sendCommand+0x1b8>
     e68:	14 c0       	rjmp	.+40     	; 0xe92 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e6a:	6b a1       	ldd	r22, Y+35	; 0x23
     e6c:	7c a1       	ldd	r23, Y+36	; 0x24
     e6e:	8d a1       	ldd	r24, Y+37	; 0x25
     e70:	9e a1       	ldd	r25, Y+38	; 0x26
     e72:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
     e76:	dc 01       	movw	r26, r24
     e78:	cb 01       	movw	r24, r22
     e7a:	9a a3       	std	Y+34, r25	; 0x22
     e7c:	89 a3       	std	Y+33, r24	; 0x21
     e7e:	89 a1       	ldd	r24, Y+33	; 0x21
     e80:	9a a1       	ldd	r25, Y+34	; 0x22
     e82:	9e 8f       	std	Y+30, r25	; 0x1e
     e84:	8d 8f       	std	Y+29, r24	; 0x1d
     e86:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e88:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	f1 f7       	brne	.-4      	; 0xe8a <LCD_sendCommand+0x200>
     e8e:	9e 8f       	std	Y+30, r25	; 0x1e
     e90:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(1);

	 PORTC = command;
     e92:	e5 e3       	ldi	r30, 0x35	; 53
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	89 ad       	ldd	r24, Y+57	; 0x39
     e98:	80 83       	st	Z, r24
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	a0 e8       	ldi	r26, 0x80	; 128
     ea0:	bf e3       	ldi	r27, 0x3F	; 63
     ea2:	89 8f       	std	Y+25, r24	; 0x19
     ea4:	9a 8f       	std	Y+26, r25	; 0x1a
     ea6:	ab 8f       	std	Y+27, r26	; 0x1b
     ea8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eaa:	69 8d       	ldd	r22, Y+25	; 0x19
     eac:	7a 8d       	ldd	r23, Y+26	; 0x1a
     eae:	8b 8d       	ldd	r24, Y+27	; 0x1b
     eb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	4a ef       	ldi	r20, 0xFA	; 250
     eb8:	54 e4       	ldi	r21, 0x44	; 68
     eba:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
     ebe:	dc 01       	movw	r26, r24
     ec0:	cb 01       	movw	r24, r22
     ec2:	8d 8b       	std	Y+21, r24	; 0x15
     ec4:	9e 8b       	std	Y+22, r25	; 0x16
     ec6:	af 8b       	std	Y+23, r26	; 0x17
     ec8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     eca:	6d 89       	ldd	r22, Y+21	; 0x15
     ecc:	7e 89       	ldd	r23, Y+22	; 0x16
     ece:	8f 89       	ldd	r24, Y+23	; 0x17
     ed0:	98 8d       	ldd	r25, Y+24	; 0x18
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	40 e8       	ldi	r20, 0x80	; 128
     ed8:	5f e3       	ldi	r21, 0x3F	; 63
     eda:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
     ede:	88 23       	and	r24, r24
     ee0:	2c f4       	brge	.+10     	; 0xeec <LCD_sendCommand+0x262>
		__ticks = 1;
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	9c 8b       	std	Y+20, r25	; 0x14
     ee8:	8b 8b       	std	Y+19, r24	; 0x13
     eea:	3f c0       	rjmp	.+126    	; 0xf6a <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
     eec:	6d 89       	ldd	r22, Y+21	; 0x15
     eee:	7e 89       	ldd	r23, Y+22	; 0x16
     ef0:	8f 89       	ldd	r24, Y+23	; 0x17
     ef2:	98 8d       	ldd	r25, Y+24	; 0x18
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	3f ef       	ldi	r19, 0xFF	; 255
     ef8:	4f e7       	ldi	r20, 0x7F	; 127
     efa:	57 e4       	ldi	r21, 0x47	; 71
     efc:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
     f00:	18 16       	cp	r1, r24
     f02:	4c f5       	brge	.+82     	; 0xf56 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f04:	69 8d       	ldd	r22, Y+25	; 0x19
     f06:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f08:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	40 e2       	ldi	r20, 0x20	; 32
     f12:	51 e4       	ldi	r21, 0x41	; 65
     f14:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	bc 01       	movw	r22, r24
     f1e:	cd 01       	movw	r24, r26
     f20:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
     f24:	dc 01       	movw	r26, r24
     f26:	cb 01       	movw	r24, r22
     f28:	9c 8b       	std	Y+20, r25	; 0x14
     f2a:	8b 8b       	std	Y+19, r24	; 0x13
     f2c:	0f c0       	rjmp	.+30     	; 0xf4c <LCD_sendCommand+0x2c2>
     f2e:	88 ec       	ldi	r24, 0xC8	; 200
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	9a 8b       	std	Y+18, r25	; 0x12
     f34:	89 8b       	std	Y+17, r24	; 0x11
     f36:	89 89       	ldd	r24, Y+17	; 0x11
     f38:	9a 89       	ldd	r25, Y+18	; 0x12
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	f1 f7       	brne	.-4      	; 0xf3a <LCD_sendCommand+0x2b0>
     f3e:	9a 8b       	std	Y+18, r25	; 0x12
     f40:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f42:	8b 89       	ldd	r24, Y+19	; 0x13
     f44:	9c 89       	ldd	r25, Y+20	; 0x14
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	9c 8b       	std	Y+20, r25	; 0x14
     f4a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f4c:	8b 89       	ldd	r24, Y+19	; 0x13
     f4e:	9c 89       	ldd	r25, Y+20	; 0x14
     f50:	00 97       	sbiw	r24, 0x00	; 0
     f52:	69 f7       	brne	.-38     	; 0xf2e <LCD_sendCommand+0x2a4>
     f54:	14 c0       	rjmp	.+40     	; 0xf7e <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f56:	6d 89       	ldd	r22, Y+21	; 0x15
     f58:	7e 89       	ldd	r23, Y+22	; 0x16
     f5a:	8f 89       	ldd	r24, Y+23	; 0x17
     f5c:	98 8d       	ldd	r25, Y+24	; 0x18
     f5e:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	9c 8b       	std	Y+20, r25	; 0x14
     f68:	8b 8b       	std	Y+19, r24	; 0x13
     f6a:	8b 89       	ldd	r24, Y+19	; 0x13
     f6c:	9c 89       	ldd	r25, Y+20	; 0x14
     f6e:	98 8b       	std	Y+16, r25	; 0x10
     f70:	8f 87       	std	Y+15, r24	; 0x0f
     f72:	8f 85       	ldd	r24, Y+15	; 0x0f
     f74:	98 89       	ldd	r25, Y+16	; 0x10
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	f1 f7       	brne	.-4      	; 0xf76 <LCD_sendCommand+0x2ec>
     f7a:	98 8b       	std	Y+16, r25	; 0x10
     f7c:	8f 87       	std	Y+15, r24	; 0x0f

	 _delay_ms(1);
	 PORTD &= (~(1<<PD5));
     f7e:	a2 e3       	ldi	r26, 0x32	; 50
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e2 e3       	ldi	r30, 0x32	; 50
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	8f 7d       	andi	r24, 0xDF	; 223
     f8a:	8c 93       	st	X, r24
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	a0 e8       	ldi	r26, 0x80	; 128
     f92:	bf e3       	ldi	r27, 0x3F	; 63
     f94:	8b 87       	std	Y+11, r24	; 0x0b
     f96:	9c 87       	std	Y+12, r25	; 0x0c
     f98:	ad 87       	std	Y+13, r26	; 0x0d
     f9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f9c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f9e:	7c 85       	ldd	r23, Y+12	; 0x0c
     fa0:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa2:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	4a ef       	ldi	r20, 0xFA	; 250
     faa:	54 e4       	ldi	r21, 0x44	; 68
     fac:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	8f 83       	std	Y+7, r24	; 0x07
     fb6:	98 87       	std	Y+8, r25	; 0x08
     fb8:	a9 87       	std	Y+9, r26	; 0x09
     fba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fbc:	6f 81       	ldd	r22, Y+7	; 0x07
     fbe:	78 85       	ldd	r23, Y+8	; 0x08
     fc0:	89 85       	ldd	r24, Y+9	; 0x09
     fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	40 e8       	ldi	r20, 0x80	; 128
     fca:	5f e3       	ldi	r21, 0x3F	; 63
     fcc:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
     fd0:	88 23       	and	r24, r24
     fd2:	2c f4       	brge	.+10     	; 0xfde <LCD_sendCommand+0x354>
		__ticks = 1;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	9e 83       	std	Y+6, r25	; 0x06
     fda:	8d 83       	std	Y+5, r24	; 0x05
     fdc:	3f c0       	rjmp	.+126    	; 0x105c <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
     fde:	6f 81       	ldd	r22, Y+7	; 0x07
     fe0:	78 85       	ldd	r23, Y+8	; 0x08
     fe2:	89 85       	ldd	r24, Y+9	; 0x09
     fe4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	3f ef       	ldi	r19, 0xFF	; 255
     fea:	4f e7       	ldi	r20, 0x7F	; 127
     fec:	57 e4       	ldi	r21, 0x47	; 71
     fee:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
     ff2:	18 16       	cp	r1, r24
     ff4:	4c f5       	brge	.+82     	; 0x1048 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ff8:	7c 85       	ldd	r23, Y+12	; 0x0c
     ffa:	8d 85       	ldd	r24, Y+13	; 0x0d
     ffc:	9e 85       	ldd	r25, Y+14	; 0x0e
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	40 e2       	ldi	r20, 0x20	; 32
    1004:	51 e4       	ldi	r21, 0x41	; 65
    1006:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	bc 01       	movw	r22, r24
    1010:	cd 01       	movw	r24, r26
    1012:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1016:	dc 01       	movw	r26, r24
    1018:	cb 01       	movw	r24, r22
    101a:	9e 83       	std	Y+6, r25	; 0x06
    101c:	8d 83       	std	Y+5, r24	; 0x05
    101e:	0f c0       	rjmp	.+30     	; 0x103e <LCD_sendCommand+0x3b4>
    1020:	88 ec       	ldi	r24, 0xC8	; 200
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	9c 83       	std	Y+4, r25	; 0x04
    1026:	8b 83       	std	Y+3, r24	; 0x03
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	9c 81       	ldd	r25, Y+4	; 0x04
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	f1 f7       	brne	.-4      	; 0x102c <LCD_sendCommand+0x3a2>
    1030:	9c 83       	std	Y+4, r25	; 0x04
    1032:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1034:	8d 81       	ldd	r24, Y+5	; 0x05
    1036:	9e 81       	ldd	r25, Y+6	; 0x06
    1038:	01 97       	sbiw	r24, 0x01	; 1
    103a:	9e 83       	std	Y+6, r25	; 0x06
    103c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    103e:	8d 81       	ldd	r24, Y+5	; 0x05
    1040:	9e 81       	ldd	r25, Y+6	; 0x06
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	69 f7       	brne	.-38     	; 0x1020 <LCD_sendCommand+0x396>
    1046:	14 c0       	rjmp	.+40     	; 0x1070 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1048:	6f 81       	ldd	r22, Y+7	; 0x07
    104a:	78 85       	ldd	r23, Y+8	; 0x08
    104c:	89 85       	ldd	r24, Y+9	; 0x09
    104e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1050:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	9e 83       	std	Y+6, r25	; 0x06
    105a:	8d 83       	std	Y+5, r24	; 0x05
    105c:	8d 81       	ldd	r24, Y+5	; 0x05
    105e:	9e 81       	ldd	r25, Y+6	; 0x06
    1060:	9a 83       	std	Y+2, r25	; 0x02
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	9a 81       	ldd	r25, Y+2	; 0x02
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	f1 f7       	brne	.-4      	; 0x1068 <LCD_sendCommand+0x3de>
    106c:	9a 83       	std	Y+2, r25	; 0x02
    106e:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(1);

 }
    1070:	e9 96       	adiw	r28, 0x39	; 57
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	f8 94       	cli
    1076:	de bf       	out	0x3e, r29	; 62
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	cd bf       	out	0x3d, r28	; 61
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <LCD_Init>:
 void LCD_Init(){
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
 	 DDRC=0XFF;
    108a:	e4 e3       	ldi	r30, 0x34	; 52
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	8f ef       	ldi	r24, 0xFF	; 255
    1090:	80 83       	st	Z, r24
 	 DDRD|= (1<<5) | (1<<6) | (1<<7);
    1092:	a1 e3       	ldi	r26, 0x31	; 49
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e1 e3       	ldi	r30, 0x31	; 49
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	80 6e       	ori	r24, 0xE0	; 224
    109e:	8c 93       	st	X, r24
 	 LCD_sendCommand(0x38); //8-bit mode
    10a0:	88 e3       	ldi	r24, 0x38	; 56
    10a2:	0e 94 45 06 	call	0xc8a	; 0xc8a <LCD_sendCommand>
 	 LCD_sendCommand(0x0C); // Display On
    10a6:	8c e0       	ldi	r24, 0x0C	; 12
    10a8:	0e 94 45 06 	call	0xc8a	; 0xc8a <LCD_sendCommand>
 	 LCD_sendCommand(0x01); // Clear Display
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	0e 94 45 06 	call	0xc8a	; 0xc8a <LCD_sendCommand>
  }
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <LCD_sendData>:

 void LCD_sendData(unsigned char data){
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	e9 97       	sbiw	r28, 0x39	; 57
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	f8 94       	cli
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	cd bf       	out	0x3d, r28	; 61
    10cc:	89 af       	std	Y+57, r24	; 0x39
	 PORTD |= (1<<PD7);	// RS = 1
    10ce:	a2 e3       	ldi	r26, 0x32	; 50
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e2 e3       	ldi	r30, 0x32	; 50
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	80 68       	ori	r24, 0x80	; 128
    10da:	8c 93       	st	X, r24
	 PORTD &= (~(1<<PD6));  // RW = 0
    10dc:	a2 e3       	ldi	r26, 0x32	; 50
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e2 e3       	ldi	r30, 0x32	; 50
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	8f 7b       	andi	r24, 0xBF	; 191
    10e8:	8c 93       	st	X, r24
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	a0 e8       	ldi	r26, 0x80	; 128
    10f0:	bf e3       	ldi	r27, 0x3F	; 63
    10f2:	8d ab       	std	Y+53, r24	; 0x35
    10f4:	9e ab       	std	Y+54, r25	; 0x36
    10f6:	af ab       	std	Y+55, r26	; 0x37
    10f8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10fa:	6d a9       	ldd	r22, Y+53	; 0x35
    10fc:	7e a9       	ldd	r23, Y+54	; 0x36
    10fe:	8f a9       	ldd	r24, Y+55	; 0x37
    1100:	98 ad       	ldd	r25, Y+56	; 0x38
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	4a ef       	ldi	r20, 0xFA	; 250
    1108:	54 e4       	ldi	r21, 0x44	; 68
    110a:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	89 ab       	std	Y+49, r24	; 0x31
    1114:	9a ab       	std	Y+50, r25	; 0x32
    1116:	ab ab       	std	Y+51, r26	; 0x33
    1118:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    111a:	69 a9       	ldd	r22, Y+49	; 0x31
    111c:	7a a9       	ldd	r23, Y+50	; 0x32
    111e:	8b a9       	ldd	r24, Y+51	; 0x33
    1120:	9c a9       	ldd	r25, Y+52	; 0x34
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	40 e8       	ldi	r20, 0x80	; 128
    1128:	5f e3       	ldi	r21, 0x3F	; 63
    112a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    112e:	88 23       	and	r24, r24
    1130:	2c f4       	brge	.+10     	; 0x113c <LCD_sendData+0x84>
		__ticks = 1;
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	98 ab       	std	Y+48, r25	; 0x30
    1138:	8f a7       	std	Y+47, r24	; 0x2f
    113a:	3f c0       	rjmp	.+126    	; 0x11ba <LCD_sendData+0x102>
	else if (__tmp > 65535)
    113c:	69 a9       	ldd	r22, Y+49	; 0x31
    113e:	7a a9       	ldd	r23, Y+50	; 0x32
    1140:	8b a9       	ldd	r24, Y+51	; 0x33
    1142:	9c a9       	ldd	r25, Y+52	; 0x34
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	3f ef       	ldi	r19, 0xFF	; 255
    1148:	4f e7       	ldi	r20, 0x7F	; 127
    114a:	57 e4       	ldi	r21, 0x47	; 71
    114c:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    1150:	18 16       	cp	r1, r24
    1152:	4c f5       	brge	.+82     	; 0x11a6 <LCD_sendData+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1154:	6d a9       	ldd	r22, Y+53	; 0x35
    1156:	7e a9       	ldd	r23, Y+54	; 0x36
    1158:	8f a9       	ldd	r24, Y+55	; 0x37
    115a:	98 ad       	ldd	r25, Y+56	; 0x38
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	40 e2       	ldi	r20, 0x20	; 32
    1162:	51 e4       	ldi	r21, 0x41	; 65
    1164:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	bc 01       	movw	r22, r24
    116e:	cd 01       	movw	r24, r26
    1170:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1174:	dc 01       	movw	r26, r24
    1176:	cb 01       	movw	r24, r22
    1178:	98 ab       	std	Y+48, r25	; 0x30
    117a:	8f a7       	std	Y+47, r24	; 0x2f
    117c:	0f c0       	rjmp	.+30     	; 0x119c <LCD_sendData+0xe4>
    117e:	88 ec       	ldi	r24, 0xC8	; 200
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	9e a7       	std	Y+46, r25	; 0x2e
    1184:	8d a7       	std	Y+45, r24	; 0x2d
    1186:	8d a5       	ldd	r24, Y+45	; 0x2d
    1188:	9e a5       	ldd	r25, Y+46	; 0x2e
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	f1 f7       	brne	.-4      	; 0x118a <LCD_sendData+0xd2>
    118e:	9e a7       	std	Y+46, r25	; 0x2e
    1190:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1192:	8f a5       	ldd	r24, Y+47	; 0x2f
    1194:	98 a9       	ldd	r25, Y+48	; 0x30
    1196:	01 97       	sbiw	r24, 0x01	; 1
    1198:	98 ab       	std	Y+48, r25	; 0x30
    119a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    119c:	8f a5       	ldd	r24, Y+47	; 0x2f
    119e:	98 a9       	ldd	r25, Y+48	; 0x30
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	69 f7       	brne	.-38     	; 0x117e <LCD_sendData+0xc6>
    11a4:	14 c0       	rjmp	.+40     	; 0x11ce <LCD_sendData+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a6:	69 a9       	ldd	r22, Y+49	; 0x31
    11a8:	7a a9       	ldd	r23, Y+50	; 0x32
    11aa:	8b a9       	ldd	r24, Y+51	; 0x33
    11ac:	9c a9       	ldd	r25, Y+52	; 0x34
    11ae:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	98 ab       	std	Y+48, r25	; 0x30
    11b8:	8f a7       	std	Y+47, r24	; 0x2f
    11ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    11bc:	98 a9       	ldd	r25, Y+48	; 0x30
    11be:	9c a7       	std	Y+44, r25	; 0x2c
    11c0:	8b a7       	std	Y+43, r24	; 0x2b
    11c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    11c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	f1 f7       	brne	.-4      	; 0x11c6 <LCD_sendData+0x10e>
    11ca:	9c a7       	std	Y+44, r25	; 0x2c
    11cc:	8b a7       	std	Y+43, r24	; 0x2b
	 _delay_ms(1);
	 PORTD |= (1<<PD5);
    11ce:	a2 e3       	ldi	r26, 0x32	; 50
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e2 e3       	ldi	r30, 0x32	; 50
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	80 62       	ori	r24, 0x20	; 32
    11da:	8c 93       	st	X, r24
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	a0 e8       	ldi	r26, 0x80	; 128
    11e2:	bf e3       	ldi	r27, 0x3F	; 63
    11e4:	8f a3       	std	Y+39, r24	; 0x27
    11e6:	98 a7       	std	Y+40, r25	; 0x28
    11e8:	a9 a7       	std	Y+41, r26	; 0x29
    11ea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ec:	6f a1       	ldd	r22, Y+39	; 0x27
    11ee:	78 a5       	ldd	r23, Y+40	; 0x28
    11f0:	89 a5       	ldd	r24, Y+41	; 0x29
    11f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	4a ef       	ldi	r20, 0xFA	; 250
    11fa:	54 e4       	ldi	r21, 0x44	; 68
    11fc:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1200:	dc 01       	movw	r26, r24
    1202:	cb 01       	movw	r24, r22
    1204:	8b a3       	std	Y+35, r24	; 0x23
    1206:	9c a3       	std	Y+36, r25	; 0x24
    1208:	ad a3       	std	Y+37, r26	; 0x25
    120a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    120c:	6b a1       	ldd	r22, Y+35	; 0x23
    120e:	7c a1       	ldd	r23, Y+36	; 0x24
    1210:	8d a1       	ldd	r24, Y+37	; 0x25
    1212:	9e a1       	ldd	r25, Y+38	; 0x26
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	40 e8       	ldi	r20, 0x80	; 128
    121a:	5f e3       	ldi	r21, 0x3F	; 63
    121c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    1220:	88 23       	and	r24, r24
    1222:	2c f4       	brge	.+10     	; 0x122e <LCD_sendData+0x176>
		__ticks = 1;
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	9a a3       	std	Y+34, r25	; 0x22
    122a:	89 a3       	std	Y+33, r24	; 0x21
    122c:	3f c0       	rjmp	.+126    	; 0x12ac <LCD_sendData+0x1f4>
	else if (__tmp > 65535)
    122e:	6b a1       	ldd	r22, Y+35	; 0x23
    1230:	7c a1       	ldd	r23, Y+36	; 0x24
    1232:	8d a1       	ldd	r24, Y+37	; 0x25
    1234:	9e a1       	ldd	r25, Y+38	; 0x26
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	3f ef       	ldi	r19, 0xFF	; 255
    123a:	4f e7       	ldi	r20, 0x7F	; 127
    123c:	57 e4       	ldi	r21, 0x47	; 71
    123e:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    1242:	18 16       	cp	r1, r24
    1244:	4c f5       	brge	.+82     	; 0x1298 <LCD_sendData+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1246:	6f a1       	ldd	r22, Y+39	; 0x27
    1248:	78 a5       	ldd	r23, Y+40	; 0x28
    124a:	89 a5       	ldd	r24, Y+41	; 0x29
    124c:	9a a5       	ldd	r25, Y+42	; 0x2a
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	40 e2       	ldi	r20, 0x20	; 32
    1254:	51 e4       	ldi	r21, 0x41	; 65
    1256:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	bc 01       	movw	r22, r24
    1260:	cd 01       	movw	r24, r26
    1262:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1266:	dc 01       	movw	r26, r24
    1268:	cb 01       	movw	r24, r22
    126a:	9a a3       	std	Y+34, r25	; 0x22
    126c:	89 a3       	std	Y+33, r24	; 0x21
    126e:	0f c0       	rjmp	.+30     	; 0x128e <LCD_sendData+0x1d6>
    1270:	88 ec       	ldi	r24, 0xC8	; 200
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	98 a3       	std	Y+32, r25	; 0x20
    1276:	8f 8f       	std	Y+31, r24	; 0x1f
    1278:	8f 8d       	ldd	r24, Y+31	; 0x1f
    127a:	98 a1       	ldd	r25, Y+32	; 0x20
    127c:	01 97       	sbiw	r24, 0x01	; 1
    127e:	f1 f7       	brne	.-4      	; 0x127c <LCD_sendData+0x1c4>
    1280:	98 a3       	std	Y+32, r25	; 0x20
    1282:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1284:	89 a1       	ldd	r24, Y+33	; 0x21
    1286:	9a a1       	ldd	r25, Y+34	; 0x22
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	9a a3       	std	Y+34, r25	; 0x22
    128c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    128e:	89 a1       	ldd	r24, Y+33	; 0x21
    1290:	9a a1       	ldd	r25, Y+34	; 0x22
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	69 f7       	brne	.-38     	; 0x1270 <LCD_sendData+0x1b8>
    1296:	14 c0       	rjmp	.+40     	; 0x12c0 <LCD_sendData+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1298:	6b a1       	ldd	r22, Y+35	; 0x23
    129a:	7c a1       	ldd	r23, Y+36	; 0x24
    129c:	8d a1       	ldd	r24, Y+37	; 0x25
    129e:	9e a1       	ldd	r25, Y+38	; 0x26
    12a0:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	9a a3       	std	Y+34, r25	; 0x22
    12aa:	89 a3       	std	Y+33, r24	; 0x21
    12ac:	89 a1       	ldd	r24, Y+33	; 0x21
    12ae:	9a a1       	ldd	r25, Y+34	; 0x22
    12b0:	9e 8f       	std	Y+30, r25	; 0x1e
    12b2:	8d 8f       	std	Y+29, r24	; 0x1d
    12b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12b8:	01 97       	sbiw	r24, 0x01	; 1
    12ba:	f1 f7       	brne	.-4      	; 0x12b8 <LCD_sendData+0x200>
    12bc:	9e 8f       	std	Y+30, r25	; 0x1e
    12be:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(1);

	 PORTC = data;
    12c0:	e5 e3       	ldi	r30, 0x35	; 53
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	89 ad       	ldd	r24, Y+57	; 0x39
    12c6:	80 83       	st	Z, r24
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	a0 e8       	ldi	r26, 0x80	; 128
    12ce:	bf e3       	ldi	r27, 0x3F	; 63
    12d0:	89 8f       	std	Y+25, r24	; 0x19
    12d2:	9a 8f       	std	Y+26, r25	; 0x1a
    12d4:	ab 8f       	std	Y+27, r26	; 0x1b
    12d6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d8:	69 8d       	ldd	r22, Y+25	; 0x19
    12da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	4a ef       	ldi	r20, 0xFA	; 250
    12e6:	54 e4       	ldi	r21, 0x44	; 68
    12e8:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	8d 8b       	std	Y+21, r24	; 0x15
    12f2:	9e 8b       	std	Y+22, r25	; 0x16
    12f4:	af 8b       	std	Y+23, r26	; 0x17
    12f6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12f8:	6d 89       	ldd	r22, Y+21	; 0x15
    12fa:	7e 89       	ldd	r23, Y+22	; 0x16
    12fc:	8f 89       	ldd	r24, Y+23	; 0x17
    12fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	40 e8       	ldi	r20, 0x80	; 128
    1306:	5f e3       	ldi	r21, 0x3F	; 63
    1308:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    130c:	88 23       	and	r24, r24
    130e:	2c f4       	brge	.+10     	; 0x131a <LCD_sendData+0x262>
		__ticks = 1;
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	9c 8b       	std	Y+20, r25	; 0x14
    1316:	8b 8b       	std	Y+19, r24	; 0x13
    1318:	3f c0       	rjmp	.+126    	; 0x1398 <LCD_sendData+0x2e0>
	else if (__tmp > 65535)
    131a:	6d 89       	ldd	r22, Y+21	; 0x15
    131c:	7e 89       	ldd	r23, Y+22	; 0x16
    131e:	8f 89       	ldd	r24, Y+23	; 0x17
    1320:	98 8d       	ldd	r25, Y+24	; 0x18
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	3f ef       	ldi	r19, 0xFF	; 255
    1326:	4f e7       	ldi	r20, 0x7F	; 127
    1328:	57 e4       	ldi	r21, 0x47	; 71
    132a:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    132e:	18 16       	cp	r1, r24
    1330:	4c f5       	brge	.+82     	; 0x1384 <LCD_sendData+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1332:	69 8d       	ldd	r22, Y+25	; 0x19
    1334:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1336:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1338:	9c 8d       	ldd	r25, Y+28	; 0x1c
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	40 e2       	ldi	r20, 0x20	; 32
    1340:	51 e4       	ldi	r21, 0x41	; 65
    1342:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	bc 01       	movw	r22, r24
    134c:	cd 01       	movw	r24, r26
    134e:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	9c 8b       	std	Y+20, r25	; 0x14
    1358:	8b 8b       	std	Y+19, r24	; 0x13
    135a:	0f c0       	rjmp	.+30     	; 0x137a <LCD_sendData+0x2c2>
    135c:	88 ec       	ldi	r24, 0xC8	; 200
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	9a 8b       	std	Y+18, r25	; 0x12
    1362:	89 8b       	std	Y+17, r24	; 0x11
    1364:	89 89       	ldd	r24, Y+17	; 0x11
    1366:	9a 89       	ldd	r25, Y+18	; 0x12
    1368:	01 97       	sbiw	r24, 0x01	; 1
    136a:	f1 f7       	brne	.-4      	; 0x1368 <LCD_sendData+0x2b0>
    136c:	9a 8b       	std	Y+18, r25	; 0x12
    136e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1370:	8b 89       	ldd	r24, Y+19	; 0x13
    1372:	9c 89       	ldd	r25, Y+20	; 0x14
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	9c 8b       	std	Y+20, r25	; 0x14
    1378:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    137a:	8b 89       	ldd	r24, Y+19	; 0x13
    137c:	9c 89       	ldd	r25, Y+20	; 0x14
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	69 f7       	brne	.-38     	; 0x135c <LCD_sendData+0x2a4>
    1382:	14 c0       	rjmp	.+40     	; 0x13ac <LCD_sendData+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1384:	6d 89       	ldd	r22, Y+21	; 0x15
    1386:	7e 89       	ldd	r23, Y+22	; 0x16
    1388:	8f 89       	ldd	r24, Y+23	; 0x17
    138a:	98 8d       	ldd	r25, Y+24	; 0x18
    138c:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	9c 8b       	std	Y+20, r25	; 0x14
    1396:	8b 8b       	std	Y+19, r24	; 0x13
    1398:	8b 89       	ldd	r24, Y+19	; 0x13
    139a:	9c 89       	ldd	r25, Y+20	; 0x14
    139c:	98 8b       	std	Y+16, r25	; 0x10
    139e:	8f 87       	std	Y+15, r24	; 0x0f
    13a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    13a2:	98 89       	ldd	r25, Y+16	; 0x10
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	f1 f7       	brne	.-4      	; 0x13a4 <LCD_sendData+0x2ec>
    13a8:	98 8b       	std	Y+16, r25	; 0x10
    13aa:	8f 87       	std	Y+15, r24	; 0x0f

	 _delay_ms(1);
	 PORTD &= (~(1<<PD5));
    13ac:	a2 e3       	ldi	r26, 0x32	; 50
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e2 e3       	ldi	r30, 0x32	; 50
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	8f 7d       	andi	r24, 0xDF	; 223
    13b8:	8c 93       	st	X, r24
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	a0 e8       	ldi	r26, 0x80	; 128
    13c0:	bf e3       	ldi	r27, 0x3F	; 63
    13c2:	8b 87       	std	Y+11, r24	; 0x0b
    13c4:	9c 87       	std	Y+12, r25	; 0x0c
    13c6:	ad 87       	std	Y+13, r26	; 0x0d
    13c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    13cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	4a ef       	ldi	r20, 0xFA	; 250
    13d8:	54 e4       	ldi	r21, 0x44	; 68
    13da:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	8f 83       	std	Y+7, r24	; 0x07
    13e4:	98 87       	std	Y+8, r25	; 0x08
    13e6:	a9 87       	std	Y+9, r26	; 0x09
    13e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13ea:	6f 81       	ldd	r22, Y+7	; 0x07
    13ec:	78 85       	ldd	r23, Y+8	; 0x08
    13ee:	89 85       	ldd	r24, Y+9	; 0x09
    13f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	40 e8       	ldi	r20, 0x80	; 128
    13f8:	5f e3       	ldi	r21, 0x3F	; 63
    13fa:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    13fe:	88 23       	and	r24, r24
    1400:	2c f4       	brge	.+10     	; 0x140c <LCD_sendData+0x354>
		__ticks = 1;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	9e 83       	std	Y+6, r25	; 0x06
    1408:	8d 83       	std	Y+5, r24	; 0x05
    140a:	3f c0       	rjmp	.+126    	; 0x148a <LCD_sendData+0x3d2>
	else if (__tmp > 65535)
    140c:	6f 81       	ldd	r22, Y+7	; 0x07
    140e:	78 85       	ldd	r23, Y+8	; 0x08
    1410:	89 85       	ldd	r24, Y+9	; 0x09
    1412:	9a 85       	ldd	r25, Y+10	; 0x0a
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	3f ef       	ldi	r19, 0xFF	; 255
    1418:	4f e7       	ldi	r20, 0x7F	; 127
    141a:	57 e4       	ldi	r21, 0x47	; 71
    141c:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    1420:	18 16       	cp	r1, r24
    1422:	4c f5       	brge	.+82     	; 0x1476 <LCD_sendData+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1424:	6b 85       	ldd	r22, Y+11	; 0x0b
    1426:	7c 85       	ldd	r23, Y+12	; 0x0c
    1428:	8d 85       	ldd	r24, Y+13	; 0x0d
    142a:	9e 85       	ldd	r25, Y+14	; 0x0e
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	40 e2       	ldi	r20, 0x20	; 32
    1432:	51 e4       	ldi	r21, 0x41	; 65
    1434:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1438:	dc 01       	movw	r26, r24
    143a:	cb 01       	movw	r24, r22
    143c:	bc 01       	movw	r22, r24
    143e:	cd 01       	movw	r24, r26
    1440:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	9e 83       	std	Y+6, r25	; 0x06
    144a:	8d 83       	std	Y+5, r24	; 0x05
    144c:	0f c0       	rjmp	.+30     	; 0x146c <LCD_sendData+0x3b4>
    144e:	88 ec       	ldi	r24, 0xC8	; 200
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	9c 83       	std	Y+4, r25	; 0x04
    1454:	8b 83       	std	Y+3, r24	; 0x03
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	9c 81       	ldd	r25, Y+4	; 0x04
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	f1 f7       	brne	.-4      	; 0x145a <LCD_sendData+0x3a2>
    145e:	9c 83       	std	Y+4, r25	; 0x04
    1460:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1462:	8d 81       	ldd	r24, Y+5	; 0x05
    1464:	9e 81       	ldd	r25, Y+6	; 0x06
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	9e 83       	std	Y+6, r25	; 0x06
    146a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    146c:	8d 81       	ldd	r24, Y+5	; 0x05
    146e:	9e 81       	ldd	r25, Y+6	; 0x06
    1470:	00 97       	sbiw	r24, 0x00	; 0
    1472:	69 f7       	brne	.-38     	; 0x144e <LCD_sendData+0x396>
    1474:	14 c0       	rjmp	.+40     	; 0x149e <LCD_sendData+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1476:	6f 81       	ldd	r22, Y+7	; 0x07
    1478:	78 85       	ldd	r23, Y+8	; 0x08
    147a:	89 85       	ldd	r24, Y+9	; 0x09
    147c:	9a 85       	ldd	r25, Y+10	; 0x0a
    147e:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	9e 83       	std	Y+6, r25	; 0x06
    1488:	8d 83       	std	Y+5, r24	; 0x05
    148a:	8d 81       	ldd	r24, Y+5	; 0x05
    148c:	9e 81       	ldd	r25, Y+6	; 0x06
    148e:	9a 83       	std	Y+2, r25	; 0x02
    1490:	89 83       	std	Y+1, r24	; 0x01
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	9a 81       	ldd	r25, Y+2	; 0x02
    1496:	01 97       	sbiw	r24, 0x01	; 1
    1498:	f1 f7       	brne	.-4      	; 0x1496 <LCD_sendData+0x3de>
    149a:	9a 83       	std	Y+2, r25	; 0x02
    149c:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(1);
 }
    149e:	e9 96       	adiw	r28, 0x39	; 57
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <LCD_sendString>:

 void LCD_sendString(const char *Str){
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	00 d0       	rcall	.+0      	; 0x14b6 <LCD_sendString+0x6>
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <LCD_sendString+0x8>
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	9c 83       	std	Y+4, r25	; 0x04
    14be:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0;
    14c0:	1a 82       	std	Y+2, r1	; 0x02
    14c2:	19 82       	std	Y+1, r1	; 0x01
    14c4:	0f c0       	rjmp	.+30     	; 0x14e4 <LCD_sendString+0x34>
	while(Str[i] != '\0')
	{
		LCD_sendData(Str[i]);
    14c6:	29 81       	ldd	r18, Y+1	; 0x01
    14c8:	3a 81       	ldd	r19, Y+2	; 0x02
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	9c 81       	ldd	r25, Y+4	; 0x04
    14ce:	fc 01       	movw	r30, r24
    14d0:	e2 0f       	add	r30, r18
    14d2:	f3 1f       	adc	r31, r19
    14d4:	80 81       	ld	r24, Z
    14d6:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <LCD_sendData>
		i++;
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	9a 81       	ldd	r25, Y+2	; 0x02
    14de:	01 96       	adiw	r24, 0x01	; 1
    14e0:	9a 83       	std	Y+2, r25	; 0x02
    14e2:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(1);
 }

 void LCD_sendString(const char *Str){
	int i = 0;
	while(Str[i] != '\0')
    14e4:	29 81       	ldd	r18, Y+1	; 0x01
    14e6:	3a 81       	ldd	r19, Y+2	; 0x02
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	9c 81       	ldd	r25, Y+4	; 0x04
    14ec:	fc 01       	movw	r30, r24
    14ee:	e2 0f       	add	r30, r18
    14f0:	f3 1f       	adc	r31, r19
    14f2:	80 81       	ld	r24, Z
    14f4:	88 23       	and	r24, r24
    14f6:	39 f7       	brne	.-50     	; 0x14c6 <LCD_sendString+0x16>
	{
		LCD_sendData(Str[i]);
		i++;
	}
 }
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	08 95       	ret

00001506 <LCD_goToRowCol>:

 void LCD_goToRowCol(int grow, int gcol){
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	28 97       	sbiw	r28, 0x08	; 8
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
    151a:	9c 83       	std	Y+4, r25	; 0x04
    151c:	8b 83       	std	Y+3, r24	; 0x03
    151e:	7e 83       	std	Y+6, r23	; 0x06
    1520:	6d 83       	std	Y+5, r22	; 0x05
	 int Address;
	 switch(grow){
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	9c 81       	ldd	r25, Y+4	; 0x04
    1526:	98 87       	std	Y+8, r25	; 0x08
    1528:	8f 83       	std	Y+7, r24	; 0x07
    152a:	8f 81       	ldd	r24, Y+7	; 0x07
    152c:	98 85       	ldd	r25, Y+8	; 0x08
    152e:	81 30       	cpi	r24, 0x01	; 1
    1530:	91 05       	cpc	r25, r1
    1532:	d1 f0       	breq	.+52     	; 0x1568 <LCD_goToRowCol+0x62>
    1534:	8f 81       	ldd	r24, Y+7	; 0x07
    1536:	98 85       	ldd	r25, Y+8	; 0x08
    1538:	82 30       	cpi	r24, 0x02	; 2
    153a:	91 05       	cpc	r25, r1
    153c:	2c f4       	brge	.+10     	; 0x1548 <LCD_goToRowCol+0x42>
    153e:	8f 81       	ldd	r24, Y+7	; 0x07
    1540:	98 85       	ldd	r25, Y+8	; 0x08
    1542:	00 97       	sbiw	r24, 0x00	; 0
    1544:	61 f0       	breq	.+24     	; 0x155e <LCD_goToRowCol+0x58>
    1546:	24 c0       	rjmp	.+72     	; 0x1590 <LCD_goToRowCol+0x8a>
    1548:	8f 81       	ldd	r24, Y+7	; 0x07
    154a:	98 85       	ldd	r25, Y+8	; 0x08
    154c:	82 30       	cpi	r24, 0x02	; 2
    154e:	91 05       	cpc	r25, r1
    1550:	91 f0       	breq	.+36     	; 0x1576 <LCD_goToRowCol+0x70>
    1552:	8f 81       	ldd	r24, Y+7	; 0x07
    1554:	98 85       	ldd	r25, Y+8	; 0x08
    1556:	83 30       	cpi	r24, 0x03	; 3
    1558:	91 05       	cpc	r25, r1
    155a:	99 f0       	breq	.+38     	; 0x1582 <LCD_goToRowCol+0x7c>
    155c:	19 c0       	rjmp	.+50     	; 0x1590 <LCD_goToRowCol+0x8a>
	 case 0: Address = gcol;
    155e:	8d 81       	ldd	r24, Y+5	; 0x05
    1560:	9e 81       	ldd	r25, Y+6	; 0x06
    1562:	9a 83       	std	Y+2, r25	; 0x02
    1564:	89 83       	std	Y+1, r24	; 0x01
    1566:	18 c0       	rjmp	.+48     	; 0x1598 <LCD_goToRowCol+0x92>
	 	 break;
	 case 1: Address =gcol+ 0x40;
    1568:	8d 81       	ldd	r24, Y+5	; 0x05
    156a:	9e 81       	ldd	r25, Y+6	; 0x06
    156c:	80 5c       	subi	r24, 0xC0	; 192
    156e:	9f 4f       	sbci	r25, 0xFF	; 255
    1570:	9a 83       	std	Y+2, r25	; 0x02
    1572:	89 83       	std	Y+1, r24	; 0x01
    1574:	11 c0       	rjmp	.+34     	; 0x1598 <LCD_goToRowCol+0x92>
	 	 break;
	 case 2: Address =gcol+0x10;
    1576:	8d 81       	ldd	r24, Y+5	; 0x05
    1578:	9e 81       	ldd	r25, Y+6	; 0x06
    157a:	40 96       	adiw	r24, 0x10	; 16
    157c:	9a 83       	std	Y+2, r25	; 0x02
    157e:	89 83       	std	Y+1, r24	; 0x01
    1580:	0b c0       	rjmp	.+22     	; 0x1598 <LCD_goToRowCol+0x92>
	 	 break;
	 case 3: Address = gcol+0x50;
    1582:	8d 81       	ldd	r24, Y+5	; 0x05
    1584:	9e 81       	ldd	r25, Y+6	; 0x06
    1586:	80 5b       	subi	r24, 0xB0	; 176
    1588:	9f 4f       	sbci	r25, 0xFF	; 255
    158a:	9a 83       	std	Y+2, r25	; 0x02
    158c:	89 83       	std	Y+1, r24	; 0x01
    158e:	04 c0       	rjmp	.+8      	; 0x1598 <LCD_goToRowCol+0x92>
	 	 break;
	 default: Address =gcol;
    1590:	8d 81       	ldd	r24, Y+5	; 0x05
    1592:	9e 81       	ldd	r25, Y+6	; 0x06
    1594:	9a 83       	std	Y+2, r25	; 0x02
    1596:	89 83       	std	Y+1, r24	; 0x01
	 }
	 LCD_sendCommand(Address | 0x80); //start from the first place plus the Address
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	80 68       	ori	r24, 0x80	; 128
    159c:	0e 94 45 06 	call	0xc8a	; 0xc8a <LCD_sendCommand>
 }
    15a0:	28 96       	adiw	r28, 0x08	; 8
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	f8 94       	cli
    15a6:	de bf       	out	0x3e, r29	; 62
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	cd bf       	out	0x3d, r28	; 61
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	08 95       	ret

000015b2 <LCD_intgerToString>:




 void LCD_intgerToString(int data)
 {
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	62 97       	sbiw	r28, 0x12	; 18
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	cd bf       	out	0x3d, r28	; 61
    15c6:	9a 8b       	std	Y+18, r25	; 0x12
    15c8:	89 8b       	std	Y+17, r24	; 0x11
    char buff[16]; /* String to hold the ascii result */
    itoa(data,buff,10); /* 10 for decimal */
    15ca:	89 89       	ldd	r24, Y+17	; 0x11
    15cc:	9a 89       	ldd	r25, Y+18	; 0x12
    15ce:	9e 01       	movw	r18, r28
    15d0:	2f 5f       	subi	r18, 0xFF	; 255
    15d2:	3f 4f       	sbci	r19, 0xFF	; 255
    15d4:	b9 01       	movw	r22, r18
    15d6:	4a e0       	ldi	r20, 0x0A	; 10
    15d8:	50 e0       	ldi	r21, 0x00	; 0
    15da:	0e 94 de 10 	call	0x21bc	; 0x21bc <itoa>
    LCD_sendString(buff);
    15de:	ce 01       	movw	r24, r28
    15e0:	01 96       	adiw	r24, 0x01	; 1
    15e2:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_sendString>
 }
    15e6:	62 96       	adiw	r28, 0x12	; 18
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	f8 94       	cli
    15ec:	de bf       	out	0x3e, r29	; 62
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	cd bf       	out	0x3d, r28	; 61
    15f2:	cf 91       	pop	r28
    15f4:	df 91       	pop	r29
    15f6:	08 95       	ret

000015f8 <PWM_Timer0_Init>:
#include "PWM_Timer0.h"

void PWM_Timer0_Init (unsigned char dutyCycle){
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	0f 92       	push	r0
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	89 83       	std	Y+1, r24	; 0x01
	TCNT0  = 0;
    1604:	e2 e5       	ldi	r30, 0x52	; 82
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	10 82       	st	Z, r1
	OCR0   = dutyCycle;
    160a:	ec e5       	ldi	r30, 0x5C	; 92
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	80 83       	st	Z, r24
	DDRB  |= (1<<PB3);
    1612:	a7 e3       	ldi	r26, 0x37	; 55
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e7 e3       	ldi	r30, 0x37	; 55
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	88 60       	ori	r24, 0x08	; 8
    161e:	8c 93       	st	X, r24
	TCCR0 |= (1<<COM00)|(1<<COM01)| (1<<WGM00)|(1<<WGM01);
    1620:	a3 e5       	ldi	r26, 0x53	; 83
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e3 e5       	ldi	r30, 0x53	; 83
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	88 67       	ori	r24, 0x78	; 120
    162c:	8c 93       	st	X, r24
}
    162e:	0f 90       	pop	r0
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <UART_Init>:
#include "UART.h"

void UART_Init(){
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
	UCSRA = (1<<U2X);
    163e:	eb e2       	ldi	r30, 0x2B	; 43
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	82 e0       	ldi	r24, 0x02	; 2
    1644:	80 83       	st	Z, r24
	UCSRB = (1<<TXEN)|(1<<RXEN);
    1646:	ea e2       	ldi	r30, 0x2A	; 42
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	88 e1       	ldi	r24, 0x18	; 24
    164c:	80 83       	st	Z, r24
	UCSRC = (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
    164e:	e0 e4       	ldi	r30, 0x40	; 64
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	86 e8       	ldi	r24, 0x86	; 134
    1654:	80 83       	st	Z, r24
	UBRRH = (103>>8);
    1656:	e0 e4       	ldi	r30, 0x40	; 64
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	10 82       	st	Z, r1
	UBRRL = (103);
    165c:	e9 e2       	ldi	r30, 0x29	; 41
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	87 e6       	ldi	r24, 0x67	; 103
    1662:	80 83       	st	Z, r24
}
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	08 95       	ret

0000166a <UART_SendByte>:
void UART_SendByte(char sent){
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	0f 92       	push	r0
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)){};
    1676:	eb e2       	ldi	r30, 0x2B	; 43
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	88 2f       	mov	r24, r24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	80 72       	andi	r24, 0x20	; 32
    1682:	90 70       	andi	r25, 0x00	; 0
    1684:	00 97       	sbiw	r24, 0x00	; 0
    1686:	b9 f3       	breq	.-18     	; 0x1676 <UART_SendByte+0xc>
	UDR=sent;
    1688:	ec e2       	ldi	r30, 0x2C	; 44
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	80 83       	st	Z, r24
}
    1690:	0f 90       	pop	r0
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <UART_RecieveByte>:
char UART_RecieveByte(){
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62

	while(BIT_IS_CLEAR(UCSRA,RXC)){};
    16a0:	eb e2       	ldi	r30, 0x2B	; 43
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	88 23       	and	r24, r24
    16a8:	dc f7       	brge	.-10     	; 0x16a0 <UART_RecieveByte+0x8>
	return UDR;
    16aa:	ec e2       	ldi	r30, 0x2C	; 44
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
}
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <UART_SendString>:

void UART_SendString(const char * sent){
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <UART_SendString+0x6>
    16bc:	00 d0       	rcall	.+0      	; 0x16be <UART_SendString+0x8>
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	9c 83       	std	Y+4, r25	; 0x04
    16c4:	8b 83       	std	Y+3, r24	; 0x03
	int i =0;
    16c6:	1a 82       	std	Y+2, r1	; 0x02
    16c8:	19 82       	std	Y+1, r1	; 0x01
    16ca:	0f c0       	rjmp	.+30     	; 0x16ea <UART_SendString+0x34>
	while (sent[i]!= '\0'){
		UART_SendByte(sent[i]);
    16cc:	29 81       	ldd	r18, Y+1	; 0x01
    16ce:	3a 81       	ldd	r19, Y+2	; 0x02
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	9c 81       	ldd	r25, Y+4	; 0x04
    16d4:	fc 01       	movw	r30, r24
    16d6:	e2 0f       	add	r30, r18
    16d8:	f3 1f       	adc	r31, r19
    16da:	80 81       	ld	r24, Z
    16dc:	0e 94 35 0b 	call	0x166a	; 0x166a <UART_SendByte>
		i++;
    16e0:	89 81       	ldd	r24, Y+1	; 0x01
    16e2:	9a 81       	ldd	r25, Y+2	; 0x02
    16e4:	01 96       	adiw	r24, 0x01	; 1
    16e6:	9a 83       	std	Y+2, r25	; 0x02
    16e8:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void UART_SendString(const char * sent){
	int i =0;
	while (sent[i]!= '\0'){
    16ea:	29 81       	ldd	r18, Y+1	; 0x01
    16ec:	3a 81       	ldd	r19, Y+2	; 0x02
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	9c 81       	ldd	r25, Y+4	; 0x04
    16f2:	fc 01       	movw	r30, r24
    16f4:	e2 0f       	add	r30, r18
    16f6:	f3 1f       	adc	r31, r19
    16f8:	80 81       	ld	r24, Z
    16fa:	88 23       	and	r24, r24
    16fc:	39 f7       	brne	.-50     	; 0x16cc <UART_SendString+0x16>
		UART_SendByte(sent[i]);
		i++;
	}
}
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	08 95       	ret

0000170c <UART_RecieveString>:

void UART_RecieveString(char * buffer){
    170c:	0f 93       	push	r16
    170e:	1f 93       	push	r17
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	00 d0       	rcall	.+0      	; 0x1716 <UART_RecieveString+0xa>
    1716:	00 d0       	rcall	.+0      	; 0x1718 <UART_RecieveString+0xc>
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	9c 83       	std	Y+4, r25	; 0x04
    171e:	8b 83       	std	Y+3, r24	; 0x03

	int i=0;
    1720:	1a 82       	std	Y+2, r1	; 0x02
    1722:	19 82       	std	Y+1, r1	; 0x01
	buffer[i]=UART_RecieveByte();
    1724:	29 81       	ldd	r18, Y+1	; 0x01
    1726:	3a 81       	ldd	r19, Y+2	; 0x02
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	9c 81       	ldd	r25, Y+4	; 0x04
    172c:	8c 01       	movw	r16, r24
    172e:	02 0f       	add	r16, r18
    1730:	13 1f       	adc	r17, r19
    1732:	0e 94 4c 0b 	call	0x1698	; 0x1698 <UART_RecieveByte>
    1736:	f8 01       	movw	r30, r16
    1738:	80 83       	st	Z, r24
    173a:	10 c0       	rjmp	.+32     	; 0x175c <UART_RecieveString+0x50>
	while(buffer[i]!='#'){
		i++;
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	9a 81       	ldd	r25, Y+2	; 0x02
    1740:	01 96       	adiw	r24, 0x01	; 1
    1742:	9a 83       	std	Y+2, r25	; 0x02
    1744:	89 83       	std	Y+1, r24	; 0x01
		buffer[i]=UART_RecieveByte();
    1746:	29 81       	ldd	r18, Y+1	; 0x01
    1748:	3a 81       	ldd	r19, Y+2	; 0x02
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	9c 81       	ldd	r25, Y+4	; 0x04
    174e:	8c 01       	movw	r16, r24
    1750:	02 0f       	add	r16, r18
    1752:	13 1f       	adc	r17, r19
    1754:	0e 94 4c 0b 	call	0x1698	; 0x1698 <UART_RecieveByte>
    1758:	f8 01       	movw	r30, r16
    175a:	80 83       	st	Z, r24

void UART_RecieveString(char * buffer){

	int i=0;
	buffer[i]=UART_RecieveByte();
	while(buffer[i]!='#'){
    175c:	29 81       	ldd	r18, Y+1	; 0x01
    175e:	3a 81       	ldd	r19, Y+2	; 0x02
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	9c 81       	ldd	r25, Y+4	; 0x04
    1764:	fc 01       	movw	r30, r24
    1766:	e2 0f       	add	r30, r18
    1768:	f3 1f       	adc	r31, r19
    176a:	80 81       	ld	r24, Z
    176c:	83 32       	cpi	r24, 0x23	; 35
    176e:	31 f7       	brne	.-52     	; 0x173c <UART_RecieveString+0x30>
		i++;
		buffer[i]=UART_RecieveByte();
	}
	buffer[i]='\0';
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	9a 81       	ldd	r25, Y+2	; 0x02
    1774:	2b 81       	ldd	r18, Y+3	; 0x03
    1776:	3c 81       	ldd	r19, Y+4	; 0x04
    1778:	f9 01       	movw	r30, r18
    177a:	e8 0f       	add	r30, r24
    177c:	f9 1f       	adc	r31, r25
    177e:	10 82       	st	Z, r1
}
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	1f 91       	pop	r17
    178e:	0f 91       	pop	r16
    1790:	08 95       	ret

00001792 <main>:
#include "KeyPad.h"
#include "LCD.h"
#include "UART.h"

const char password[4]="1996";
int main(void){
    1792:	0f 93       	push	r16
    1794:	1f 93       	push	r17
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	cb 56       	subi	r28, 0x6B	; 107
    17a0:	d0 40       	sbci	r29, 0x00	; 0
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	de bf       	out	0x3e, r29	; 62
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	cd bf       	out	0x3d, r28	; 61
	LCD_Init();
    17ac:	0e 94 41 08 	call	0x1082	; 0x1082 <LCD_Init>
	UART_Init();
    17b0:	0e 94 1b 0b 	call	0x1636	; 0x1636 <UART_Init>
	UART_SendByte('X');
    17b4:	88 e5       	ldi	r24, 0x58	; 88
    17b6:	0e 94 35 0b 	call	0x166a	; 0x166a <UART_SendByte>
    17ba:	fe 01       	movw	r30, r28
    17bc:	e1 5a       	subi	r30, 0xA1	; 161
    17be:	ff 4f       	sbci	r31, 0xFF	; 255
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	a8 e4       	ldi	r26, 0x48	; 72
    17c6:	b2 e4       	ldi	r27, 0x42	; 66
    17c8:	80 83       	st	Z, r24
    17ca:	91 83       	std	Z+1, r25	; 0x01
    17cc:	a2 83       	std	Z+2, r26	; 0x02
    17ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d0:	8e 01       	movw	r16, r28
    17d2:	05 5a       	subi	r16, 0xA5	; 165
    17d4:	1f 4f       	sbci	r17, 0xFF	; 255
    17d6:	fe 01       	movw	r30, r28
    17d8:	e1 5a       	subi	r30, 0xA1	; 161
    17da:	ff 4f       	sbci	r31, 0xFF	; 255
    17dc:	60 81       	ld	r22, Z
    17de:	71 81       	ldd	r23, Z+1	; 0x01
    17e0:	82 81       	ldd	r24, Z+2	; 0x02
    17e2:	93 81       	ldd	r25, Z+3	; 0x03
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	4a ef       	ldi	r20, 0xFA	; 250
    17ea:	54 e4       	ldi	r21, 0x44	; 68
    17ec:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	f8 01       	movw	r30, r16
    17f6:	80 83       	st	Z, r24
    17f8:	91 83       	std	Z+1, r25	; 0x01
    17fa:	a2 83       	std	Z+2, r26	; 0x02
    17fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17fe:	fe 01       	movw	r30, r28
    1800:	e5 5a       	subi	r30, 0xA5	; 165
    1802:	ff 4f       	sbci	r31, 0xFF	; 255
    1804:	60 81       	ld	r22, Z
    1806:	71 81       	ldd	r23, Z+1	; 0x01
    1808:	82 81       	ldd	r24, Z+2	; 0x02
    180a:	93 81       	ldd	r25, Z+3	; 0x03
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e8       	ldi	r20, 0x80	; 128
    1812:	5f e3       	ldi	r21, 0x3F	; 63
    1814:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    1818:	88 23       	and	r24, r24
    181a:	44 f4       	brge	.+16     	; 0x182c <main+0x9a>
		__ticks = 1;
    181c:	fe 01       	movw	r30, r28
    181e:	e7 5a       	subi	r30, 0xA7	; 167
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	91 83       	std	Z+1, r25	; 0x01
    1828:	80 83       	st	Z, r24
    182a:	64 c0       	rjmp	.+200    	; 0x18f4 <main+0x162>
	else if (__tmp > 65535)
    182c:	fe 01       	movw	r30, r28
    182e:	e5 5a       	subi	r30, 0xA5	; 165
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	60 81       	ld	r22, Z
    1834:	71 81       	ldd	r23, Z+1	; 0x01
    1836:	82 81       	ldd	r24, Z+2	; 0x02
    1838:	93 81       	ldd	r25, Z+3	; 0x03
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	3f ef       	ldi	r19, 0xFF	; 255
    183e:	4f e7       	ldi	r20, 0x7F	; 127
    1840:	57 e4       	ldi	r21, 0x47	; 71
    1842:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    1846:	18 16       	cp	r1, r24
    1848:	0c f0       	brlt	.+2      	; 0x184c <main+0xba>
    184a:	43 c0       	rjmp	.+134    	; 0x18d2 <main+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    184c:	fe 01       	movw	r30, r28
    184e:	e1 5a       	subi	r30, 0xA1	; 161
    1850:	ff 4f       	sbci	r31, 0xFF	; 255
    1852:	60 81       	ld	r22, Z
    1854:	71 81       	ldd	r23, Z+1	; 0x01
    1856:	82 81       	ldd	r24, Z+2	; 0x02
    1858:	93 81       	ldd	r25, Z+3	; 0x03
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	40 e2       	ldi	r20, 0x20	; 32
    1860:	51 e4       	ldi	r21, 0x41	; 65
    1862:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	8e 01       	movw	r16, r28
    186c:	07 5a       	subi	r16, 0xA7	; 167
    186e:	1f 4f       	sbci	r17, 0xFF	; 255
    1870:	bc 01       	movw	r22, r24
    1872:	cd 01       	movw	r24, r26
    1874:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	f8 01       	movw	r30, r16
    187e:	91 83       	std	Z+1, r25	; 0x01
    1880:	80 83       	st	Z, r24
    1882:	1f c0       	rjmp	.+62     	; 0x18c2 <main+0x130>
    1884:	fe 01       	movw	r30, r28
    1886:	e9 5a       	subi	r30, 0xA9	; 169
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	88 ec       	ldi	r24, 0xC8	; 200
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	91 83       	std	Z+1, r25	; 0x01
    1890:	80 83       	st	Z, r24
    1892:	fe 01       	movw	r30, r28
    1894:	e9 5a       	subi	r30, 0xA9	; 169
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	80 81       	ld	r24, Z
    189a:	91 81       	ldd	r25, Z+1	; 0x01
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	f1 f7       	brne	.-4      	; 0x189c <main+0x10a>
    18a0:	fe 01       	movw	r30, r28
    18a2:	e9 5a       	subi	r30, 0xA9	; 169
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	91 83       	std	Z+1, r25	; 0x01
    18a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18aa:	de 01       	movw	r26, r28
    18ac:	a7 5a       	subi	r26, 0xA7	; 167
    18ae:	bf 4f       	sbci	r27, 0xFF	; 255
    18b0:	fe 01       	movw	r30, r28
    18b2:	e7 5a       	subi	r30, 0xA7	; 167
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	80 81       	ld	r24, Z
    18b8:	91 81       	ldd	r25, Z+1	; 0x01
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	11 96       	adiw	r26, 0x01	; 1
    18be:	9c 93       	st	X, r25
    18c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c2:	fe 01       	movw	r30, r28
    18c4:	e7 5a       	subi	r30, 0xA7	; 167
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	80 81       	ld	r24, Z
    18ca:	91 81       	ldd	r25, Z+1	; 0x01
    18cc:	00 97       	sbiw	r24, 0x00	; 0
    18ce:	d1 f6       	brne	.-76     	; 0x1884 <main+0xf2>
    18d0:	27 c0       	rjmp	.+78     	; 0x1920 <main+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d2:	8e 01       	movw	r16, r28
    18d4:	07 5a       	subi	r16, 0xA7	; 167
    18d6:	1f 4f       	sbci	r17, 0xFF	; 255
    18d8:	fe 01       	movw	r30, r28
    18da:	e5 5a       	subi	r30, 0xA5	; 165
    18dc:	ff 4f       	sbci	r31, 0xFF	; 255
    18de:	60 81       	ld	r22, Z
    18e0:	71 81       	ldd	r23, Z+1	; 0x01
    18e2:	82 81       	ldd	r24, Z+2	; 0x02
    18e4:	93 81       	ldd	r25, Z+3	; 0x03
    18e6:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	f8 01       	movw	r30, r16
    18f0:	91 83       	std	Z+1, r25	; 0x01
    18f2:	80 83       	st	Z, r24
    18f4:	de 01       	movw	r26, r28
    18f6:	ab 5a       	subi	r26, 0xAB	; 171
    18f8:	bf 4f       	sbci	r27, 0xFF	; 255
    18fa:	fe 01       	movw	r30, r28
    18fc:	e7 5a       	subi	r30, 0xA7	; 167
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	80 81       	ld	r24, Z
    1902:	91 81       	ldd	r25, Z+1	; 0x01
    1904:	8d 93       	st	X+, r24
    1906:	9c 93       	st	X, r25
    1908:	fe 01       	movw	r30, r28
    190a:	eb 5a       	subi	r30, 0xAB	; 171
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	80 81       	ld	r24, Z
    1910:	91 81       	ldd	r25, Z+1	; 0x01
    1912:	01 97       	sbiw	r24, 0x01	; 1
    1914:	f1 f7       	brne	.-4      	; 0x1912 <main+0x180>
    1916:	fe 01       	movw	r30, r28
    1918:	eb 5a       	subi	r30, 0xAB	; 171
    191a:	ff 4f       	sbci	r31, 0xFF	; 255
    191c:	91 83       	std	Z+1, r25	; 0x01
    191e:	80 83       	st	Z, r24
	_delay_ms(50);
	while(1){
			LCD_goToRowCol(0,0);
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	60 e0       	ldi	r22, 0x00	; 0
    1926:	70 e0       	ldi	r23, 0x00	; 0
    1928:	0e 94 83 0a 	call	0x1506	; 0x1506 <LCD_goToRowCol>
			LCD_sendCommand(0x01);
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	0e 94 45 06 	call	0xc8a	; 0xc8a <LCD_sendCommand>
			LCD_sendString("Enter Password");
    1932:	80 e6       	ldi	r24, 0x60	; 96
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_sendString>
			static int keyVal;
			char givenPassword[4]="";
    193a:	fe 01       	movw	r30, r28
    193c:	e9 59       	subi	r30, 0x99	; 153
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	80 91 97 00 	lds	r24, 0x0097
    1944:	90 91 98 00 	lds	r25, 0x0098
    1948:	a0 91 99 00 	lds	r26, 0x0099
    194c:	b0 91 9a 00 	lds	r27, 0x009A
    1950:	80 83       	st	Z, r24
    1952:	91 83       	std	Z+1, r25	; 0x01
    1954:	a2 83       	std	Z+2, r26	; 0x02
    1956:	b3 83       	std	Z+3, r27	; 0x03
			int flag =0;
    1958:	fe 01       	movw	r30, r28
    195a:	eb 59       	subi	r30, 0x9B	; 155
    195c:	ff 4f       	sbci	r31, 0xFF	; 255
    195e:	11 82       	std	Z+1, r1	; 0x01
    1960:	10 82       	st	Z, r1
			char tempKeyVal[1]="";
    1962:	fe 01       	movw	r30, r28
    1964:	e5 59       	subi	r30, 0x95	; 149
    1966:	ff 4f       	sbci	r31, 0xFF	; 255
    1968:	80 91 9b 00 	lds	r24, 0x009B
    196c:	80 83       	st	Z, r24

			int i=0;
    196e:	fe 01       	movw	r30, r28
    1970:	ed 59       	subi	r30, 0x9D	; 157
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	11 82       	std	Z+1, r1	; 0x01
    1976:	10 82       	st	Z, r1
			while(1){
				LCD_goToRowCol(1,0);
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	60 e0       	ldi	r22, 0x00	; 0
    197e:	70 e0       	ldi	r23, 0x00	; 0
    1980:	0e 94 83 0a 	call	0x1506	; 0x1506 <LCD_goToRowCol>
				keyVal = keyPressesd();
    1984:	0e 94 a5 05 	call	0xb4a	; 0xb4a <keyPressesd>
    1988:	90 93 a9 00 	sts	0x00A9, r25
    198c:	80 93 a8 00 	sts	0x00A8, r24
    1990:	fe 01       	movw	r30, r28
    1992:	ef 5a       	subi	r30, 0xAF	; 175
    1994:	ff 4f       	sbci	r31, 0xFF	; 255
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	a8 e4       	ldi	r26, 0x48	; 72
    199c:	b3 e4       	ldi	r27, 0x43	; 67
    199e:	80 83       	st	Z, r24
    19a0:	91 83       	std	Z+1, r25	; 0x01
    19a2:	a2 83       	std	Z+2, r26	; 0x02
    19a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a6:	8e 01       	movw	r16, r28
    19a8:	03 5b       	subi	r16, 0xB3	; 179
    19aa:	1f 4f       	sbci	r17, 0xFF	; 255
    19ac:	fe 01       	movw	r30, r28
    19ae:	ef 5a       	subi	r30, 0xAF	; 175
    19b0:	ff 4f       	sbci	r31, 0xFF	; 255
    19b2:	60 81       	ld	r22, Z
    19b4:	71 81       	ldd	r23, Z+1	; 0x01
    19b6:	82 81       	ldd	r24, Z+2	; 0x02
    19b8:	93 81       	ldd	r25, Z+3	; 0x03
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	4a ef       	ldi	r20, 0xFA	; 250
    19c0:	54 e4       	ldi	r21, 0x44	; 68
    19c2:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	f8 01       	movw	r30, r16
    19cc:	80 83       	st	Z, r24
    19ce:	91 83       	std	Z+1, r25	; 0x01
    19d0:	a2 83       	std	Z+2, r26	; 0x02
    19d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19d4:	fe 01       	movw	r30, r28
    19d6:	e3 5b       	subi	r30, 0xB3	; 179
    19d8:	ff 4f       	sbci	r31, 0xFF	; 255
    19da:	60 81       	ld	r22, Z
    19dc:	71 81       	ldd	r23, Z+1	; 0x01
    19de:	82 81       	ldd	r24, Z+2	; 0x02
    19e0:	93 81       	ldd	r25, Z+3	; 0x03
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e8       	ldi	r20, 0x80	; 128
    19e8:	5f e3       	ldi	r21, 0x3F	; 63
    19ea:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    19ee:	88 23       	and	r24, r24
    19f0:	44 f4       	brge	.+16     	; 0x1a02 <main+0x270>
		__ticks = 1;
    19f2:	fe 01       	movw	r30, r28
    19f4:	e5 5b       	subi	r30, 0xB5	; 181
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	91 83       	std	Z+1, r25	; 0x01
    19fe:	80 83       	st	Z, r24
    1a00:	64 c0       	rjmp	.+200    	; 0x1aca <main+0x338>
	else if (__tmp > 65535)
    1a02:	fe 01       	movw	r30, r28
    1a04:	e3 5b       	subi	r30, 0xB3	; 179
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	60 81       	ld	r22, Z
    1a0a:	71 81       	ldd	r23, Z+1	; 0x01
    1a0c:	82 81       	ldd	r24, Z+2	; 0x02
    1a0e:	93 81       	ldd	r25, Z+3	; 0x03
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	3f ef       	ldi	r19, 0xFF	; 255
    1a14:	4f e7       	ldi	r20, 0x7F	; 127
    1a16:	57 e4       	ldi	r21, 0x47	; 71
    1a18:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    1a1c:	18 16       	cp	r1, r24
    1a1e:	0c f0       	brlt	.+2      	; 0x1a22 <main+0x290>
    1a20:	43 c0       	rjmp	.+134    	; 0x1aa8 <main+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a22:	fe 01       	movw	r30, r28
    1a24:	ef 5a       	subi	r30, 0xAF	; 175
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	60 81       	ld	r22, Z
    1a2a:	71 81       	ldd	r23, Z+1	; 0x01
    1a2c:	82 81       	ldd	r24, Z+2	; 0x02
    1a2e:	93 81       	ldd	r25, Z+3	; 0x03
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e2       	ldi	r20, 0x20	; 32
    1a36:	51 e4       	ldi	r21, 0x41	; 65
    1a38:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	8e 01       	movw	r16, r28
    1a42:	05 5b       	subi	r16, 0xB5	; 181
    1a44:	1f 4f       	sbci	r17, 0xFF	; 255
    1a46:	bc 01       	movw	r22, r24
    1a48:	cd 01       	movw	r24, r26
    1a4a:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	f8 01       	movw	r30, r16
    1a54:	91 83       	std	Z+1, r25	; 0x01
    1a56:	80 83       	st	Z, r24
    1a58:	1f c0       	rjmp	.+62     	; 0x1a98 <main+0x306>
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	e7 5b       	subi	r30, 0xB7	; 183
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	88 ec       	ldi	r24, 0xC8	; 200
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	91 83       	std	Z+1, r25	; 0x01
    1a66:	80 83       	st	Z, r24
    1a68:	fe 01       	movw	r30, r28
    1a6a:	e7 5b       	subi	r30, 0xB7	; 183
    1a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6e:	80 81       	ld	r24, Z
    1a70:	91 81       	ldd	r25, Z+1	; 0x01
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	f1 f7       	brne	.-4      	; 0x1a72 <main+0x2e0>
    1a76:	fe 01       	movw	r30, r28
    1a78:	e7 5b       	subi	r30, 0xB7	; 183
    1a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7c:	91 83       	std	Z+1, r25	; 0x01
    1a7e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a80:	de 01       	movw	r26, r28
    1a82:	a5 5b       	subi	r26, 0xB5	; 181
    1a84:	bf 4f       	sbci	r27, 0xFF	; 255
    1a86:	fe 01       	movw	r30, r28
    1a88:	e5 5b       	subi	r30, 0xB5	; 181
    1a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8c:	80 81       	ld	r24, Z
    1a8e:	91 81       	ldd	r25, Z+1	; 0x01
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	11 96       	adiw	r26, 0x01	; 1
    1a94:	9c 93       	st	X, r25
    1a96:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a98:	fe 01       	movw	r30, r28
    1a9a:	e5 5b       	subi	r30, 0xB5	; 181
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	80 81       	ld	r24, Z
    1aa0:	91 81       	ldd	r25, Z+1	; 0x01
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	d1 f6       	brne	.-76     	; 0x1a5a <main+0x2c8>
    1aa6:	28 c0       	rjmp	.+80     	; 0x1af8 <main+0x366>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa8:	8e 01       	movw	r16, r28
    1aaa:	05 5b       	subi	r16, 0xB5	; 181
    1aac:	1f 4f       	sbci	r17, 0xFF	; 255
    1aae:	fe 01       	movw	r30, r28
    1ab0:	e3 5b       	subi	r30, 0xB3	; 179
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	60 81       	ld	r22, Z
    1ab6:	71 81       	ldd	r23, Z+1	; 0x01
    1ab8:	82 81       	ldd	r24, Z+2	; 0x02
    1aba:	93 81       	ldd	r25, Z+3	; 0x03
    1abc:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	f8 01       	movw	r30, r16
    1ac6:	91 83       	std	Z+1, r25	; 0x01
    1ac8:	80 83       	st	Z, r24
    1aca:	de 01       	movw	r26, r28
    1acc:	a9 5b       	subi	r26, 0xB9	; 185
    1ace:	bf 4f       	sbci	r27, 0xFF	; 255
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	e5 5b       	subi	r30, 0xB5	; 181
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	80 81       	ld	r24, Z
    1ad8:	91 81       	ldd	r25, Z+1	; 0x01
    1ada:	11 96       	adiw	r26, 0x01	; 1
    1adc:	9c 93       	st	X, r25
    1ade:	8e 93       	st	-X, r24
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	e9 5b       	subi	r30, 0xB9	; 185
    1ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae6:	80 81       	ld	r24, Z
    1ae8:	91 81       	ldd	r25, Z+1	; 0x01
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	f1 f7       	brne	.-4      	; 0x1aea <main+0x358>
    1aee:	fe 01       	movw	r30, r28
    1af0:	e9 5b       	subi	r30, 0xB9	; 185
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	91 83       	std	Z+1, r25	; 0x01
    1af6:	80 83       	st	Z, r24
				_delay_ms(200);
				if(keyVal == 42){
    1af8:	80 91 a8 00 	lds	r24, 0x00A8
    1afc:	90 91 a9 00 	lds	r25, 0x00A9
    1b00:	8a 32       	cpi	r24, 0x2A	; 42
    1b02:	91 05       	cpc	r25, r1
    1b04:	d1 f4       	brne	.+52     	; 0x1b3a <main+0x3a8>
					LCD_goToRowCol(2,i++);
    1b06:	fe 01       	movw	r30, r28
    1b08:	ed 59       	subi	r30, 0x9D	; 157
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	20 81       	ld	r18, Z
    1b0e:	31 81       	ldd	r19, Z+1	; 0x01
    1b10:	de 01       	movw	r26, r28
    1b12:	ad 59       	subi	r26, 0x9D	; 157
    1b14:	bf 4f       	sbci	r27, 0xFF	; 255
    1b16:	fe 01       	movw	r30, r28
    1b18:	ed 59       	subi	r30, 0x9D	; 157
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	80 81       	ld	r24, Z
    1b1e:	91 81       	ldd	r25, Z+1	; 0x01
    1b20:	01 96       	adiw	r24, 0x01	; 1
    1b22:	8d 93       	st	X+, r24
    1b24:	9c 93       	st	X, r25
    1b26:	82 e0       	ldi	r24, 0x02	; 2
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	b9 01       	movw	r22, r18
    1b2c:	0e 94 83 0a 	call	0x1506	; 0x1506 <LCD_goToRowCol>
					LCD_sendString("*");
    1b30:	8f e6       	ldi	r24, 0x6F	; 111
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_sendString>
    1b38:	ec c0       	rjmp	.+472    	; 0x1d12 <main+0x580>
				}else if(keyVal == 35){
    1b3a:	80 91 a8 00 	lds	r24, 0x00A8
    1b3e:	90 91 a9 00 	lds	r25, 0x00A9
    1b42:	83 32       	cpi	r24, 0x23	; 35
    1b44:	91 05       	cpc	r25, r1
    1b46:	d1 f4       	brne	.+52     	; 0x1b7c <main+0x3ea>
					LCD_goToRowCol(2,i++);
    1b48:	fe 01       	movw	r30, r28
    1b4a:	ed 59       	subi	r30, 0x9D	; 157
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	20 81       	ld	r18, Z
    1b50:	31 81       	ldd	r19, Z+1	; 0x01
    1b52:	de 01       	movw	r26, r28
    1b54:	ad 59       	subi	r26, 0x9D	; 157
    1b56:	bf 4f       	sbci	r27, 0xFF	; 255
    1b58:	fe 01       	movw	r30, r28
    1b5a:	ed 59       	subi	r30, 0x9D	; 157
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	80 81       	ld	r24, Z
    1b60:	91 81       	ldd	r25, Z+1	; 0x01
    1b62:	01 96       	adiw	r24, 0x01	; 1
    1b64:	8d 93       	st	X+, r24
    1b66:	9c 93       	st	X, r25
    1b68:	82 e0       	ldi	r24, 0x02	; 2
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	b9 01       	movw	r22, r18
    1b6e:	0e 94 83 0a 	call	0x1506	; 0x1506 <LCD_goToRowCol>
					LCD_sendString("#");
    1b72:	81 e7       	ldi	r24, 0x71	; 113
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_sendString>
    1b7a:	cb c0       	rjmp	.+406    	; 0x1d12 <main+0x580>
				}else{
					LCD_goToRowCol(2,i);
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	ed 59       	subi	r30, 0x9D	; 157
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	20 81       	ld	r18, Z
    1b84:	31 81       	ldd	r19, Z+1	; 0x01
    1b86:	82 e0       	ldi	r24, 0x02	; 2
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	b9 01       	movw	r22, r18
    1b8c:	0e 94 83 0a 	call	0x1506	; 0x1506 <LCD_goToRowCol>
					LCD_intgerToString(keyVal);
    1b90:	80 91 a8 00 	lds	r24, 0x00A8
    1b94:	90 91 a9 00 	lds	r25, 0x00A9
    1b98:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <LCD_intgerToString>
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	ed 5b       	subi	r30, 0xBD	; 189
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	ac e8       	ldi	r26, 0x8C	; 140
    1ba8:	b2 e4       	ldi	r27, 0x42	; 66
    1baa:	80 83       	st	Z, r24
    1bac:	91 83       	std	Z+1, r25	; 0x01
    1bae:	a2 83       	std	Z+2, r26	; 0x02
    1bb0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb2:	8e 01       	movw	r16, r28
    1bb4:	01 5c       	subi	r16, 0xC1	; 193
    1bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb8:	fe 01       	movw	r30, r28
    1bba:	ed 5b       	subi	r30, 0xBD	; 189
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	60 81       	ld	r22, Z
    1bc0:	71 81       	ldd	r23, Z+1	; 0x01
    1bc2:	82 81       	ldd	r24, Z+2	; 0x02
    1bc4:	93 81       	ldd	r25, Z+3	; 0x03
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	4a ef       	ldi	r20, 0xFA	; 250
    1bcc:	54 e4       	ldi	r21, 0x44	; 68
    1bce:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	f8 01       	movw	r30, r16
    1bd8:	80 83       	st	Z, r24
    1bda:	91 83       	std	Z+1, r25	; 0x01
    1bdc:	a2 83       	std	Z+2, r26	; 0x02
    1bde:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1be0:	fe 01       	movw	r30, r28
    1be2:	ff 96       	adiw	r30, 0x3f	; 63
    1be4:	60 81       	ld	r22, Z
    1be6:	71 81       	ldd	r23, Z+1	; 0x01
    1be8:	82 81       	ldd	r24, Z+2	; 0x02
    1bea:	93 81       	ldd	r25, Z+3	; 0x03
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e8       	ldi	r20, 0x80	; 128
    1bf2:	5f e3       	ldi	r21, 0x3F	; 63
    1bf4:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    1bf8:	88 23       	and	r24, r24
    1bfa:	2c f4       	brge	.+10     	; 0x1c06 <main+0x474>
		__ticks = 1;
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	9e af       	std	Y+62, r25	; 0x3e
    1c02:	8d af       	std	Y+61, r24	; 0x3d
    1c04:	46 c0       	rjmp	.+140    	; 0x1c92 <main+0x500>
	else if (__tmp > 65535)
    1c06:	fe 01       	movw	r30, r28
    1c08:	ff 96       	adiw	r30, 0x3f	; 63
    1c0a:	60 81       	ld	r22, Z
    1c0c:	71 81       	ldd	r23, Z+1	; 0x01
    1c0e:	82 81       	ldd	r24, Z+2	; 0x02
    1c10:	93 81       	ldd	r25, Z+3	; 0x03
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	3f ef       	ldi	r19, 0xFF	; 255
    1c16:	4f e7       	ldi	r20, 0x7F	; 127
    1c18:	57 e4       	ldi	r21, 0x47	; 71
    1c1a:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    1c1e:	18 16       	cp	r1, r24
    1c20:	64 f5       	brge	.+88     	; 0x1c7a <main+0x4e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c22:	fe 01       	movw	r30, r28
    1c24:	ed 5b       	subi	r30, 0xBD	; 189
    1c26:	ff 4f       	sbci	r31, 0xFF	; 255
    1c28:	60 81       	ld	r22, Z
    1c2a:	71 81       	ldd	r23, Z+1	; 0x01
    1c2c:	82 81       	ldd	r24, Z+2	; 0x02
    1c2e:	93 81       	ldd	r25, Z+3	; 0x03
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	40 e2       	ldi	r20, 0x20	; 32
    1c36:	51 e4       	ldi	r21, 0x41	; 65
    1c38:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	bc 01       	movw	r22, r24
    1c42:	cd 01       	movw	r24, r26
    1c44:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	9e af       	std	Y+62, r25	; 0x3e
    1c4e:	8d af       	std	Y+61, r24	; 0x3d
    1c50:	0f c0       	rjmp	.+30     	; 0x1c70 <main+0x4de>
    1c52:	88 ec       	ldi	r24, 0xC8	; 200
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	9c af       	std	Y+60, r25	; 0x3c
    1c58:	8b af       	std	Y+59, r24	; 0x3b
    1c5a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c5c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c5e:	01 97       	sbiw	r24, 0x01	; 1
    1c60:	f1 f7       	brne	.-4      	; 0x1c5e <main+0x4cc>
    1c62:	9c af       	std	Y+60, r25	; 0x3c
    1c64:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c66:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c68:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	9e af       	std	Y+62, r25	; 0x3e
    1c6e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c70:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c72:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c74:	00 97       	sbiw	r24, 0x00	; 0
    1c76:	69 f7       	brne	.-38     	; 0x1c52 <main+0x4c0>
    1c78:	16 c0       	rjmp	.+44     	; 0x1ca6 <main+0x514>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	ff 96       	adiw	r30, 0x3f	; 63
    1c7e:	60 81       	ld	r22, Z
    1c80:	71 81       	ldd	r23, Z+1	; 0x01
    1c82:	82 81       	ldd	r24, Z+2	; 0x02
    1c84:	93 81       	ldd	r25, Z+3	; 0x03
    1c86:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	9e af       	std	Y+62, r25	; 0x3e
    1c90:	8d af       	std	Y+61, r24	; 0x3d
    1c92:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c94:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c96:	9a af       	std	Y+58, r25	; 0x3a
    1c98:	89 af       	std	Y+57, r24	; 0x39
    1c9a:	89 ad       	ldd	r24, Y+57	; 0x39
    1c9c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	f1 f7       	brne	.-4      	; 0x1c9e <main+0x50c>
    1ca2:	9a af       	std	Y+58, r25	; 0x3a
    1ca4:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(70);
					itoa(keyVal,tempKeyVal,10);
    1ca6:	80 91 a8 00 	lds	r24, 0x00A8
    1caa:	90 91 a9 00 	lds	r25, 0x00A9
    1cae:	9e 01       	movw	r18, r28
    1cb0:	25 59       	subi	r18, 0x95	; 149
    1cb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb4:	b9 01       	movw	r22, r18
    1cb6:	4a e0       	ldi	r20, 0x0A	; 10
    1cb8:	50 e0       	ldi	r21, 0x00	; 0
    1cba:	0e 94 de 10 	call	0x21bc	; 0x21bc <itoa>
					givenPassword[i]=tempKeyVal;
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	ed 59       	subi	r30, 0x9D	; 157
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	20 81       	ld	r18, Z
    1cc6:	31 81       	ldd	r19, Z+1	; 0x01
    1cc8:	ce 01       	movw	r24, r28
    1cca:	85 59       	subi	r24, 0x95	; 149
    1ccc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cce:	48 2f       	mov	r20, r24
    1cd0:	ce 01       	movw	r24, r28
    1cd2:	89 59       	subi	r24, 0x99	; 153
    1cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	e2 0f       	add	r30, r18
    1cda:	f3 1f       	adc	r31, r19
    1cdc:	40 83       	st	Z, r20
					LCD_goToRowCol(2,i);
    1cde:	fe 01       	movw	r30, r28
    1ce0:	ed 59       	subi	r30, 0x9D	; 157
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	20 81       	ld	r18, Z
    1ce6:	31 81       	ldd	r19, Z+1	; 0x01
    1ce8:	82 e0       	ldi	r24, 0x02	; 2
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	b9 01       	movw	r22, r18
    1cee:	0e 94 83 0a 	call	0x1506	; 0x1506 <LCD_goToRowCol>
					LCD_sendString("*");
    1cf2:	8f e6       	ldi	r24, 0x6F	; 111
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_sendString>

					i++;
    1cfa:	de 01       	movw	r26, r28
    1cfc:	ad 59       	subi	r26, 0x9D	; 157
    1cfe:	bf 4f       	sbci	r27, 0xFF	; 255
    1d00:	fe 01       	movw	r30, r28
    1d02:	ed 59       	subi	r30, 0x9D	; 157
    1d04:	ff 4f       	sbci	r31, 0xFF	; 255
    1d06:	80 81       	ld	r24, Z
    1d08:	91 81       	ldd	r25, Z+1	; 0x01
    1d0a:	01 96       	adiw	r24, 0x01	; 1
    1d0c:	11 96       	adiw	r26, 0x01	; 1
    1d0e:	9c 93       	st	X, r25
    1d10:	8e 93       	st	-X, r24
				}
				if (password[i-1]== tempKeyVal[0]){
    1d12:	fe 01       	movw	r30, r28
    1d14:	ed 59       	subi	r30, 0x9D	; 157
    1d16:	ff 4f       	sbci	r31, 0xFF	; 255
    1d18:	80 81       	ld	r24, Z
    1d1a:	91 81       	ldd	r25, Z+1	; 0x01
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	fc 01       	movw	r30, r24
    1d20:	ec 55       	subi	r30, 0x5C	; 92
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	90 81       	ld	r25, Z
    1d26:	fe 01       	movw	r30, r28
    1d28:	e5 59       	subi	r30, 0x95	; 149
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	80 81       	ld	r24, Z
    1d2e:	98 17       	cp	r25, r24
    1d30:	41 f4       	brne	.+16     	; 0x1d42 <main+0x5b0>
					flag=1;
    1d32:	fe 01       	movw	r30, r28
    1d34:	eb 59       	subi	r30, 0x9B	; 155
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	91 83       	std	Z+1, r25	; 0x01
    1d3e:	80 83       	st	Z, r24
    1d40:	05 c0       	rjmp	.+10     	; 0x1d4c <main+0x5ba>
				}
				else{
					flag=0;
    1d42:	fe 01       	movw	r30, r28
    1d44:	eb 59       	subi	r30, 0x9B	; 155
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	11 82       	std	Z+1, r1	; 0x01
    1d4a:	10 82       	st	Z, r1
				}
				if (i==4){
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	ed 59       	subi	r30, 0x9D	; 157
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	80 81       	ld	r24, Z
    1d54:	91 81       	ldd	r25, Z+1	; 0x01
    1d56:	84 30       	cpi	r24, 0x04	; 4
    1d58:	91 05       	cpc	r25, r1
    1d5a:	09 f0       	breq	.+2      	; 0x1d5e <main+0x5cc>
    1d5c:	0d ce       	rjmp	.-998    	; 0x1978 <main+0x1e6>
					if (flag==1){
    1d5e:	fe 01       	movw	r30, r28
    1d60:	eb 59       	subi	r30, 0x9B	; 155
    1d62:	ff 4f       	sbci	r31, 0xFF	; 255
    1d64:	80 81       	ld	r24, Z
    1d66:	91 81       	ldd	r25, Z+1	; 0x01
    1d68:	81 30       	cpi	r24, 0x01	; 1
    1d6a:	91 05       	cpc	r25, r1
    1d6c:	09 f0       	breq	.+2      	; 0x1d70 <main+0x5de>
    1d6e:	fa c0       	rjmp	.+500    	; 0x1f64 <main+0x7d2>
						flag=0;
    1d70:	fe 01       	movw	r30, r28
    1d72:	eb 59       	subi	r30, 0x9B	; 155
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	11 82       	std	Z+1, r1	; 0x01
    1d78:	10 82       	st	Z, r1
						UART_SendByte('O');
    1d7a:	8f e4       	ldi	r24, 0x4F	; 79
    1d7c:	0e 94 35 0b 	call	0x166a	; 0x166a <UART_SendByte>
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	a8 e4       	ldi	r26, 0x48	; 72
    1d86:	b2 e4       	ldi	r27, 0x42	; 66
    1d88:	8d ab       	std	Y+53, r24	; 0x35
    1d8a:	9e ab       	std	Y+54, r25	; 0x36
    1d8c:	af ab       	std	Y+55, r26	; 0x37
    1d8e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d90:	6d a9       	ldd	r22, Y+53	; 0x35
    1d92:	7e a9       	ldd	r23, Y+54	; 0x36
    1d94:	8f a9       	ldd	r24, Y+55	; 0x37
    1d96:	98 ad       	ldd	r25, Y+56	; 0x38
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	4a ef       	ldi	r20, 0xFA	; 250
    1d9e:	54 e4       	ldi	r21, 0x44	; 68
    1da0:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	89 ab       	std	Y+49, r24	; 0x31
    1daa:	9a ab       	std	Y+50, r25	; 0x32
    1dac:	ab ab       	std	Y+51, r26	; 0x33
    1dae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1db0:	69 a9       	ldd	r22, Y+49	; 0x31
    1db2:	7a a9       	ldd	r23, Y+50	; 0x32
    1db4:	8b a9       	ldd	r24, Y+51	; 0x33
    1db6:	9c a9       	ldd	r25, Y+52	; 0x34
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	40 e8       	ldi	r20, 0x80	; 128
    1dbe:	5f e3       	ldi	r21, 0x3F	; 63
    1dc0:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    1dc4:	88 23       	and	r24, r24
    1dc6:	2c f4       	brge	.+10     	; 0x1dd2 <main+0x640>
		__ticks = 1;
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	98 ab       	std	Y+48, r25	; 0x30
    1dce:	8f a7       	std	Y+47, r24	; 0x2f
    1dd0:	3f c0       	rjmp	.+126    	; 0x1e50 <main+0x6be>
	else if (__tmp > 65535)
    1dd2:	69 a9       	ldd	r22, Y+49	; 0x31
    1dd4:	7a a9       	ldd	r23, Y+50	; 0x32
    1dd6:	8b a9       	ldd	r24, Y+51	; 0x33
    1dd8:	9c a9       	ldd	r25, Y+52	; 0x34
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	3f ef       	ldi	r19, 0xFF	; 255
    1dde:	4f e7       	ldi	r20, 0x7F	; 127
    1de0:	57 e4       	ldi	r21, 0x47	; 71
    1de2:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    1de6:	18 16       	cp	r1, r24
    1de8:	4c f5       	brge	.+82     	; 0x1e3c <main+0x6aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dea:	6d a9       	ldd	r22, Y+53	; 0x35
    1dec:	7e a9       	ldd	r23, Y+54	; 0x36
    1dee:	8f a9       	ldd	r24, Y+55	; 0x37
    1df0:	98 ad       	ldd	r25, Y+56	; 0x38
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e2       	ldi	r20, 0x20	; 32
    1df8:	51 e4       	ldi	r21, 0x41	; 65
    1dfa:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	bc 01       	movw	r22, r24
    1e04:	cd 01       	movw	r24, r26
    1e06:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	98 ab       	std	Y+48, r25	; 0x30
    1e10:	8f a7       	std	Y+47, r24	; 0x2f
    1e12:	0f c0       	rjmp	.+30     	; 0x1e32 <main+0x6a0>
    1e14:	88 ec       	ldi	r24, 0xC8	; 200
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	9e a7       	std	Y+46, r25	; 0x2e
    1e1a:	8d a7       	std	Y+45, r24	; 0x2d
    1e1c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e1e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	f1 f7       	brne	.-4      	; 0x1e20 <main+0x68e>
    1e24:	9e a7       	std	Y+46, r25	; 0x2e
    1e26:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e28:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e2a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	98 ab       	std	Y+48, r25	; 0x30
    1e30:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e32:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e34:	98 a9       	ldd	r25, Y+48	; 0x30
    1e36:	00 97       	sbiw	r24, 0x00	; 0
    1e38:	69 f7       	brne	.-38     	; 0x1e14 <main+0x682>
    1e3a:	14 c0       	rjmp	.+40     	; 0x1e64 <main+0x6d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e3e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e40:	8b a9       	ldd	r24, Y+51	; 0x33
    1e42:	9c a9       	ldd	r25, Y+52	; 0x34
    1e44:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	98 ab       	std	Y+48, r25	; 0x30
    1e4e:	8f a7       	std	Y+47, r24	; 0x2f
    1e50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e52:	98 a9       	ldd	r25, Y+48	; 0x30
    1e54:	9c a7       	std	Y+44, r25	; 0x2c
    1e56:	8b a7       	std	Y+43, r24	; 0x2b
    1e58:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e5a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	f1 f7       	brne	.-4      	; 0x1e5c <main+0x6ca>
    1e60:	9c a7       	std	Y+44, r25	; 0x2c
    1e62:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(50);
						LCD_sendCommand(0x01);
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	0e 94 45 06 	call	0xc8a	; 0xc8a <LCD_sendCommand>
						LCD_goToRowCol(0,0);
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	60 e0       	ldi	r22, 0x00	; 0
    1e70:	70 e0       	ldi	r23, 0x00	; 0
    1e72:	0e 94 83 0a 	call	0x1506	; 0x1506 <LCD_goToRowCol>
						LCD_sendString("Door Open for 2 seconds");
    1e76:	83 e7       	ldi	r24, 0x73	; 115
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_sendString>
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	aa ef       	ldi	r26, 0xFA	; 250
    1e84:	b4 e4       	ldi	r27, 0x44	; 68
    1e86:	8f a3       	std	Y+39, r24	; 0x27
    1e88:	98 a7       	std	Y+40, r25	; 0x28
    1e8a:	a9 a7       	std	Y+41, r26	; 0x29
    1e8c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8e:	6f a1       	ldd	r22, Y+39	; 0x27
    1e90:	78 a5       	ldd	r23, Y+40	; 0x28
    1e92:	89 a5       	ldd	r24, Y+41	; 0x29
    1e94:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	4a ef       	ldi	r20, 0xFA	; 250
    1e9c:	54 e4       	ldi	r21, 0x44	; 68
    1e9e:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	8b a3       	std	Y+35, r24	; 0x23
    1ea8:	9c a3       	std	Y+36, r25	; 0x24
    1eaa:	ad a3       	std	Y+37, r26	; 0x25
    1eac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1eae:	6b a1       	ldd	r22, Y+35	; 0x23
    1eb0:	7c a1       	ldd	r23, Y+36	; 0x24
    1eb2:	8d a1       	ldd	r24, Y+37	; 0x25
    1eb4:	9e a1       	ldd	r25, Y+38	; 0x26
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	40 e8       	ldi	r20, 0x80	; 128
    1ebc:	5f e3       	ldi	r21, 0x3F	; 63
    1ebe:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    1ec2:	88 23       	and	r24, r24
    1ec4:	2c f4       	brge	.+10     	; 0x1ed0 <main+0x73e>
		__ticks = 1;
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	9a a3       	std	Y+34, r25	; 0x22
    1ecc:	89 a3       	std	Y+33, r24	; 0x21
    1ece:	3f c0       	rjmp	.+126    	; 0x1f4e <main+0x7bc>
	else if (__tmp > 65535)
    1ed0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ed2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ed4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ed6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	3f ef       	ldi	r19, 0xFF	; 255
    1edc:	4f e7       	ldi	r20, 0x7F	; 127
    1ede:	57 e4       	ldi	r21, 0x47	; 71
    1ee0:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    1ee4:	18 16       	cp	r1, r24
    1ee6:	4c f5       	brge	.+82     	; 0x1f3a <main+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee8:	6f a1       	ldd	r22, Y+39	; 0x27
    1eea:	78 a5       	ldd	r23, Y+40	; 0x28
    1eec:	89 a5       	ldd	r24, Y+41	; 0x29
    1eee:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	40 e2       	ldi	r20, 0x20	; 32
    1ef6:	51 e4       	ldi	r21, 0x41	; 65
    1ef8:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	bc 01       	movw	r22, r24
    1f02:	cd 01       	movw	r24, r26
    1f04:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	9a a3       	std	Y+34, r25	; 0x22
    1f0e:	89 a3       	std	Y+33, r24	; 0x21
    1f10:	0f c0       	rjmp	.+30     	; 0x1f30 <main+0x79e>
    1f12:	88 ec       	ldi	r24, 0xC8	; 200
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	98 a3       	std	Y+32, r25	; 0x20
    1f18:	8f 8f       	std	Y+31, r24	; 0x1f
    1f1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f1c:	98 a1       	ldd	r25, Y+32	; 0x20
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	f1 f7       	brne	.-4      	; 0x1f1e <main+0x78c>
    1f22:	98 a3       	std	Y+32, r25	; 0x20
    1f24:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f26:	89 a1       	ldd	r24, Y+33	; 0x21
    1f28:	9a a1       	ldd	r25, Y+34	; 0x22
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	9a a3       	std	Y+34, r25	; 0x22
    1f2e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f30:	89 a1       	ldd	r24, Y+33	; 0x21
    1f32:	9a a1       	ldd	r25, Y+34	; 0x22
    1f34:	00 97       	sbiw	r24, 0x00	; 0
    1f36:	69 f7       	brne	.-38     	; 0x1f12 <main+0x780>
    1f38:	f3 cc       	rjmp	.-1562   	; 0x1920 <main+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f3c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f3e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f40:	9e a1       	ldd	r25, Y+38	; 0x26
    1f42:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	9a a3       	std	Y+34, r25	; 0x22
    1f4c:	89 a3       	std	Y+33, r24	; 0x21
    1f4e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f50:	9a a1       	ldd	r25, Y+34	; 0x22
    1f52:	9e 8f       	std	Y+30, r25	; 0x1e
    1f54:	8d 8f       	std	Y+29, r24	; 0x1d
    1f56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f58:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	f1 f7       	brne	.-4      	; 0x1f5a <main+0x7c8>
    1f5e:	9e 8f       	std	Y+30, r25	; 0x1e
    1f60:	8d 8f       	std	Y+29, r24	; 0x1d
    1f62:	de cc       	rjmp	.-1604   	; 0x1920 <main+0x18e>
						_delay_ms(2000);
						break;
					}
					else{
						UART_SendByte('X');
    1f64:	88 e5       	ldi	r24, 0x58	; 88
    1f66:	0e 94 35 0b 	call	0x166a	; 0x166a <UART_SendByte>
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	a8 e4       	ldi	r26, 0x48	; 72
    1f70:	b2 e4       	ldi	r27, 0x42	; 66
    1f72:	89 8f       	std	Y+25, r24	; 0x19
    1f74:	9a 8f       	std	Y+26, r25	; 0x1a
    1f76:	ab 8f       	std	Y+27, r26	; 0x1b
    1f78:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f7a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	4a ef       	ldi	r20, 0xFA	; 250
    1f88:	54 e4       	ldi	r21, 0x44	; 68
    1f8a:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	8d 8b       	std	Y+21, r24	; 0x15
    1f94:	9e 8b       	std	Y+22, r25	; 0x16
    1f96:	af 8b       	std	Y+23, r26	; 0x17
    1f98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	40 e8       	ldi	r20, 0x80	; 128
    1fa8:	5f e3       	ldi	r21, 0x3F	; 63
    1faa:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    1fae:	88 23       	and	r24, r24
    1fb0:	2c f4       	brge	.+10     	; 0x1fbc <main+0x82a>
		__ticks = 1;
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	9c 8b       	std	Y+20, r25	; 0x14
    1fb8:	8b 8b       	std	Y+19, r24	; 0x13
    1fba:	3f c0       	rjmp	.+126    	; 0x203a <main+0x8a8>
	else if (__tmp > 65535)
    1fbc:	6d 89       	ldd	r22, Y+21	; 0x15
    1fbe:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	3f ef       	ldi	r19, 0xFF	; 255
    1fc8:	4f e7       	ldi	r20, 0x7F	; 127
    1fca:	57 e4       	ldi	r21, 0x47	; 71
    1fcc:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    1fd0:	18 16       	cp	r1, r24
    1fd2:	4c f5       	brge	.+82     	; 0x2026 <main+0x894>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd4:	69 8d       	ldd	r22, Y+25	; 0x19
    1fd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e2       	ldi	r20, 0x20	; 32
    1fe2:	51 e4       	ldi	r21, 0x41	; 65
    1fe4:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	bc 01       	movw	r22, r24
    1fee:	cd 01       	movw	r24, r26
    1ff0:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	9c 8b       	std	Y+20, r25	; 0x14
    1ffa:	8b 8b       	std	Y+19, r24	; 0x13
    1ffc:	0f c0       	rjmp	.+30     	; 0x201c <main+0x88a>
    1ffe:	88 ec       	ldi	r24, 0xC8	; 200
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	9a 8b       	std	Y+18, r25	; 0x12
    2004:	89 8b       	std	Y+17, r24	; 0x11
    2006:	89 89       	ldd	r24, Y+17	; 0x11
    2008:	9a 89       	ldd	r25, Y+18	; 0x12
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <main+0x878>
    200e:	9a 8b       	std	Y+18, r25	; 0x12
    2010:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2012:	8b 89       	ldd	r24, Y+19	; 0x13
    2014:	9c 89       	ldd	r25, Y+20	; 0x14
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	9c 8b       	std	Y+20, r25	; 0x14
    201a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201c:	8b 89       	ldd	r24, Y+19	; 0x13
    201e:	9c 89       	ldd	r25, Y+20	; 0x14
    2020:	00 97       	sbiw	r24, 0x00	; 0
    2022:	69 f7       	brne	.-38     	; 0x1ffe <main+0x86c>
    2024:	14 c0       	rjmp	.+40     	; 0x204e <main+0x8bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2026:	6d 89       	ldd	r22, Y+21	; 0x15
    2028:	7e 89       	ldd	r23, Y+22	; 0x16
    202a:	8f 89       	ldd	r24, Y+23	; 0x17
    202c:	98 8d       	ldd	r25, Y+24	; 0x18
    202e:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	9c 8b       	std	Y+20, r25	; 0x14
    2038:	8b 8b       	std	Y+19, r24	; 0x13
    203a:	8b 89       	ldd	r24, Y+19	; 0x13
    203c:	9c 89       	ldd	r25, Y+20	; 0x14
    203e:	98 8b       	std	Y+16, r25	; 0x10
    2040:	8f 87       	std	Y+15, r24	; 0x0f
    2042:	8f 85       	ldd	r24, Y+15	; 0x0f
    2044:	98 89       	ldd	r25, Y+16	; 0x10
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	f1 f7       	brne	.-4      	; 0x2046 <main+0x8b4>
    204a:	98 8b       	std	Y+16, r25	; 0x10
    204c:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(50);
						LCD_sendCommand(0x01);
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	0e 94 45 06 	call	0xc8a	; 0xc8a <LCD_sendCommand>
						LCD_goToRowCol(0,0);
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	60 e0       	ldi	r22, 0x00	; 0
    205a:	70 e0       	ldi	r23, 0x00	; 0
    205c:	0e 94 83 0a 	call	0x1506	; 0x1506 <LCD_goToRowCol>
						LCD_sendString("Try Again!!");
    2060:	8b e8       	ldi	r24, 0x8B	; 139
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_sendString>
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	a8 e4       	ldi	r26, 0x48	; 72
    206e:	b3 e4       	ldi	r27, 0x43	; 67
    2070:	8b 87       	std	Y+11, r24	; 0x0b
    2072:	9c 87       	std	Y+12, r25	; 0x0c
    2074:	ad 87       	std	Y+13, r26	; 0x0d
    2076:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2078:	6b 85       	ldd	r22, Y+11	; 0x0b
    207a:	7c 85       	ldd	r23, Y+12	; 0x0c
    207c:	8d 85       	ldd	r24, Y+13	; 0x0d
    207e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	4a ef       	ldi	r20, 0xFA	; 250
    2086:	54 e4       	ldi	r21, 0x44	; 68
    2088:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	8f 83       	std	Y+7, r24	; 0x07
    2092:	98 87       	std	Y+8, r25	; 0x08
    2094:	a9 87       	std	Y+9, r26	; 0x09
    2096:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2098:	6f 81       	ldd	r22, Y+7	; 0x07
    209a:	78 85       	ldd	r23, Y+8	; 0x08
    209c:	89 85       	ldd	r24, Y+9	; 0x09
    209e:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e8       	ldi	r20, 0x80	; 128
    20a6:	5f e3       	ldi	r21, 0x3F	; 63
    20a8:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    20ac:	88 23       	and	r24, r24
    20ae:	2c f4       	brge	.+10     	; 0x20ba <main+0x928>
		__ticks = 1;
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	9e 83       	std	Y+6, r25	; 0x06
    20b6:	8d 83       	std	Y+5, r24	; 0x05
    20b8:	3f c0       	rjmp	.+126    	; 0x2138 <main+0x9a6>
	else if (__tmp > 65535)
    20ba:	6f 81       	ldd	r22, Y+7	; 0x07
    20bc:	78 85       	ldd	r23, Y+8	; 0x08
    20be:	89 85       	ldd	r24, Y+9	; 0x09
    20c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	3f ef       	ldi	r19, 0xFF	; 255
    20c6:	4f e7       	ldi	r20, 0x7F	; 127
    20c8:	57 e4       	ldi	r21, 0x47	; 71
    20ca:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    20ce:	18 16       	cp	r1, r24
    20d0:	4c f5       	brge	.+82     	; 0x2124 <main+0x992>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e2       	ldi	r20, 0x20	; 32
    20e0:	51 e4       	ldi	r21, 0x41	; 65
    20e2:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	bc 01       	movw	r22, r24
    20ec:	cd 01       	movw	r24, r26
    20ee:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	9e 83       	std	Y+6, r25	; 0x06
    20f8:	8d 83       	std	Y+5, r24	; 0x05
    20fa:	0f c0       	rjmp	.+30     	; 0x211a <main+0x988>
    20fc:	88 ec       	ldi	r24, 0xC8	; 200
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	9c 83       	std	Y+4, r25	; 0x04
    2102:	8b 83       	std	Y+3, r24	; 0x03
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	9c 81       	ldd	r25, Y+4	; 0x04
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	f1 f7       	brne	.-4      	; 0x2108 <main+0x976>
    210c:	9c 83       	std	Y+4, r25	; 0x04
    210e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2110:	8d 81       	ldd	r24, Y+5	; 0x05
    2112:	9e 81       	ldd	r25, Y+6	; 0x06
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	9e 83       	std	Y+6, r25	; 0x06
    2118:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211a:	8d 81       	ldd	r24, Y+5	; 0x05
    211c:	9e 81       	ldd	r25, Y+6	; 0x06
    211e:	00 97       	sbiw	r24, 0x00	; 0
    2120:	69 f7       	brne	.-38     	; 0x20fc <main+0x96a>
    2122:	fe cb       	rjmp	.-2052   	; 0x1920 <main+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2124:	6f 81       	ldd	r22, Y+7	; 0x07
    2126:	78 85       	ldd	r23, Y+8	; 0x08
    2128:	89 85       	ldd	r24, Y+9	; 0x09
    212a:	9a 85       	ldd	r25, Y+10	; 0x0a
    212c:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	9e 83       	std	Y+6, r25	; 0x06
    2136:	8d 83       	std	Y+5, r24	; 0x05
    2138:	8d 81       	ldd	r24, Y+5	; 0x05
    213a:	9e 81       	ldd	r25, Y+6	; 0x06
    213c:	9a 83       	std	Y+2, r25	; 0x02
    213e:	89 83       	std	Y+1, r24	; 0x01
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	9a 81       	ldd	r25, Y+2	; 0x02
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	f1 f7       	brne	.-4      	; 0x2144 <main+0x9b2>
    2148:	9a 83       	std	Y+2, r25	; 0x02
    214a:	89 83       	std	Y+1, r24	; 0x01
    214c:	e9 cb       	rjmp	.-2094   	; 0x1920 <main+0x18e>

0000214e <__prologue_saves__>:
    214e:	2f 92       	push	r2
    2150:	3f 92       	push	r3
    2152:	4f 92       	push	r4
    2154:	5f 92       	push	r5
    2156:	6f 92       	push	r6
    2158:	7f 92       	push	r7
    215a:	8f 92       	push	r8
    215c:	9f 92       	push	r9
    215e:	af 92       	push	r10
    2160:	bf 92       	push	r11
    2162:	cf 92       	push	r12
    2164:	df 92       	push	r13
    2166:	ef 92       	push	r14
    2168:	ff 92       	push	r15
    216a:	0f 93       	push	r16
    216c:	1f 93       	push	r17
    216e:	cf 93       	push	r28
    2170:	df 93       	push	r29
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	ca 1b       	sub	r28, r26
    2178:	db 0b       	sbc	r29, r27
    217a:	0f b6       	in	r0, 0x3f	; 63
    217c:	f8 94       	cli
    217e:	de bf       	out	0x3e, r29	; 62
    2180:	0f be       	out	0x3f, r0	; 63
    2182:	cd bf       	out	0x3d, r28	; 61
    2184:	09 94       	ijmp

00002186 <__epilogue_restores__>:
    2186:	2a 88       	ldd	r2, Y+18	; 0x12
    2188:	39 88       	ldd	r3, Y+17	; 0x11
    218a:	48 88       	ldd	r4, Y+16	; 0x10
    218c:	5f 84       	ldd	r5, Y+15	; 0x0f
    218e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2190:	7d 84       	ldd	r7, Y+13	; 0x0d
    2192:	8c 84       	ldd	r8, Y+12	; 0x0c
    2194:	9b 84       	ldd	r9, Y+11	; 0x0b
    2196:	aa 84       	ldd	r10, Y+10	; 0x0a
    2198:	b9 84       	ldd	r11, Y+9	; 0x09
    219a:	c8 84       	ldd	r12, Y+8	; 0x08
    219c:	df 80       	ldd	r13, Y+7	; 0x07
    219e:	ee 80       	ldd	r14, Y+6	; 0x06
    21a0:	fd 80       	ldd	r15, Y+5	; 0x05
    21a2:	0c 81       	ldd	r16, Y+4	; 0x04
    21a4:	1b 81       	ldd	r17, Y+3	; 0x03
    21a6:	aa 81       	ldd	r26, Y+2	; 0x02
    21a8:	b9 81       	ldd	r27, Y+1	; 0x01
    21aa:	ce 0f       	add	r28, r30
    21ac:	d1 1d       	adc	r29, r1
    21ae:	0f b6       	in	r0, 0x3f	; 63
    21b0:	f8 94       	cli
    21b2:	de bf       	out	0x3e, r29	; 62
    21b4:	0f be       	out	0x3f, r0	; 63
    21b6:	cd bf       	out	0x3d, r28	; 61
    21b8:	ed 01       	movw	r28, r26
    21ba:	08 95       	ret

000021bc <itoa>:
    21bc:	fb 01       	movw	r30, r22
    21be:	9f 01       	movw	r18, r30
    21c0:	e8 94       	clt
    21c2:	42 30       	cpi	r20, 0x02	; 2
    21c4:	c4 f0       	brlt	.+48     	; 0x21f6 <itoa+0x3a>
    21c6:	45 32       	cpi	r20, 0x25	; 37
    21c8:	b4 f4       	brge	.+44     	; 0x21f6 <itoa+0x3a>
    21ca:	4a 30       	cpi	r20, 0x0A	; 10
    21cc:	29 f4       	brne	.+10     	; 0x21d8 <itoa+0x1c>
    21ce:	97 fb       	bst	r25, 7
    21d0:	1e f4       	brtc	.+6      	; 0x21d8 <itoa+0x1c>
    21d2:	90 95       	com	r25
    21d4:	81 95       	neg	r24
    21d6:	9f 4f       	sbci	r25, 0xFF	; 255
    21d8:	64 2f       	mov	r22, r20
    21da:	77 27       	eor	r23, r23
    21dc:	0e 94 0f 11 	call	0x221e	; 0x221e <__udivmodhi4>
    21e0:	80 5d       	subi	r24, 0xD0	; 208
    21e2:	8a 33       	cpi	r24, 0x3A	; 58
    21e4:	0c f0       	brlt	.+2      	; 0x21e8 <itoa+0x2c>
    21e6:	89 5d       	subi	r24, 0xD9	; 217
    21e8:	81 93       	st	Z+, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	00 97       	sbiw	r24, 0x00	; 0
    21ee:	a1 f7       	brne	.-24     	; 0x21d8 <itoa+0x1c>
    21f0:	16 f4       	brtc	.+4      	; 0x21f6 <itoa+0x3a>
    21f2:	5d e2       	ldi	r21, 0x2D	; 45
    21f4:	51 93       	st	Z+, r21
    21f6:	10 82       	st	Z, r1
    21f8:	c9 01       	movw	r24, r18
    21fa:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <strrev>

000021fe <strrev>:
    21fe:	dc 01       	movw	r26, r24
    2200:	fc 01       	movw	r30, r24
    2202:	67 2f       	mov	r22, r23
    2204:	71 91       	ld	r23, Z+
    2206:	77 23       	and	r23, r23
    2208:	e1 f7       	brne	.-8      	; 0x2202 <strrev+0x4>
    220a:	32 97       	sbiw	r30, 0x02	; 2
    220c:	04 c0       	rjmp	.+8      	; 0x2216 <strrev+0x18>
    220e:	7c 91       	ld	r23, X
    2210:	6d 93       	st	X+, r22
    2212:	70 83       	st	Z, r23
    2214:	62 91       	ld	r22, -Z
    2216:	ae 17       	cp	r26, r30
    2218:	bf 07       	cpc	r27, r31
    221a:	c8 f3       	brcs	.-14     	; 0x220e <strrev+0x10>
    221c:	08 95       	ret

0000221e <__udivmodhi4>:
    221e:	aa 1b       	sub	r26, r26
    2220:	bb 1b       	sub	r27, r27
    2222:	51 e1       	ldi	r21, 0x11	; 17
    2224:	07 c0       	rjmp	.+14     	; 0x2234 <__udivmodhi4_ep>

00002226 <__udivmodhi4_loop>:
    2226:	aa 1f       	adc	r26, r26
    2228:	bb 1f       	adc	r27, r27
    222a:	a6 17       	cp	r26, r22
    222c:	b7 07       	cpc	r27, r23
    222e:	10 f0       	brcs	.+4      	; 0x2234 <__udivmodhi4_ep>
    2230:	a6 1b       	sub	r26, r22
    2232:	b7 0b       	sbc	r27, r23

00002234 <__udivmodhi4_ep>:
    2234:	88 1f       	adc	r24, r24
    2236:	99 1f       	adc	r25, r25
    2238:	5a 95       	dec	r21
    223a:	a9 f7       	brne	.-22     	; 0x2226 <__udivmodhi4_loop>
    223c:	80 95       	com	r24
    223e:	90 95       	com	r25
    2240:	bc 01       	movw	r22, r24
    2242:	cd 01       	movw	r24, r26
    2244:	08 95       	ret

00002246 <_exit>:
    2246:	f8 94       	cli

00002248 <__stop_program>:
    2248:	ff cf       	rjmp	.-2      	; 0x2248 <__stop_program>
